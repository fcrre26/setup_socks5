#!/bin/bash

# ┌─────────────────────────────────────────────┐
# │ 颜色定义                                   │
# └─────────────────────────────────────────────┘
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# ┌─────────────────────────────────────────────┐
# │ 使用说明                                   │
# └─────────────────────────────────────────────┘
show_usage() {
    echo -e "${YELLOW}=== 代理服务器配置流程 ===${NC}"
    echo -e "推荐配置顺序："
    echo -e "1. 环境配置 - 安装必要的软件包和服务"
    echo -e "2. BBR加速 - 优化网络性能"
    echo -e "3. IPv6管理 - 配置IPv6地址（可选）"
    echo -e "4. 带宽控制 - 设置流量限制"
    echo -e "5. SOCKS5设置 - 配置代理服务"
    echo -e "6. IP策略 - 设置进出流量规则"
    echo -e "7. 连通性测试 - 验证代理是否正常工作"
    echo -e "${GREEN}提示：首次使用请按照顺序依次配置${NC}"
    echo -e "${RED}注意：清除规则(选项9)会重置所有设置${NC}\n"
}

# ┌─────────────────────────────────────────────┐
# │ 系统检测模块                               │
# └─────────────────────────────────────────────┘
detect_system() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        case "$ID" in
            "ubuntu"|"debian")
                service_manager="systemctl"
                ;;
            "centos")
                if (( $(echo "$VERSION_ID >= 7" | bc -l) )); then
                    service_manager="systemctl"
                else
                    service_manager="service"
                fi
                ;;
            *)
                echo -e "${RED}不支持的系统${NC}"
                return 1
                ;;
        esac
    else
        echo -e "${RED}无法识别的系统${NC}"
        return 1
    fi
}

# ┌─────────────────────────────────────────────┐
# │ 软件安装模块                               │
# └─────────────────────────────────────────────┘
check_and_install_unzip() {
    if ! command -v unzip &> /dev/null; then
        echo "未安装unzip，正在安装..."
        if [ "$ID" == "centos" ]; then
            yum install unzip -y
        else
            apt-get update && apt-get install unzip -y
        fi
    fi
    return 0
}

check_and_install_iptables() {
    if ! command -v iptables &> /dev/null; then
        echo "未安装iptables，正在安装..."
        if [ "$ID" == "centos" ]; then
            yum install iptables-services -y
            systemctl enable iptables
        else
            apt-get update && apt-get install iptables-persistent -y
        fi
    fi
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ 系统检查模块                               │
# └─────────────────────────────────────────────┘
check_ipv6() {
    if ! sysctl -a 2>/dev/null | grep -q "net.ipv6.conf.all.disable_ipv6 = 0"; then
        echo "启用IPv6支持..."
        sysctl -w net.ipv6.conf.all.disable_ipv6=0
        sysctl -w net.ipv6.conf.default.disable_ipv6=0
        echo "net.ipv6.conf.all.disable_ipv6 = 0" >> /etc/sysctl.conf
        echo "net.ipv6.conf.default.disable_ipv6 = 0" >> /etc/sysctl.conf
        sysctl -p
    fi
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ Xray安装模块                               │
# └─────────────────────────────────────────────┘
install_xray() {
    echo "正在从GitHub下载Xray..."
    check_and_install_unzip
    wget --no-check-certificate -O /tmp/xray.zip "https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip"
    unzip /tmp/xray.zip -d /usr/local/bin
    rm -f /tmp/xray.zip
    chmod +x /usr/local/bin/xray
    echo "Xray已下载并设置为可执行。"
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ 环境配置模块                               │
# └─────────────────────────────────────────────┘
setup_environment() {
    echo "设置防火墙规则..."
    iptables -P INPUT ACCEPT
    iptables -P FORWARD ACCEPT
    iptables -P OUTPUT ACCEPT
    iptables -t nat -F
    iptables -t mangle -F
    iptables -F
    iptables -X
    iptables-save

    install_xray
    echo "创建Xray服务文件..."
    cat <<EOF > /etc/systemd/system/xray.service
[Unit]
Description=The Xray Proxy Server
After=network-online.target

[Service]
ExecStart=/usr/local/bin/xray -c /etc/xray/serve.json
ExecStop=/bin/kill -s QUIT \$MAINPID
Restart=always
RestartSec=15s

[Install]
WantedBy=multi-user.target
EOF

    echo "启动Xray服务..."
    $service_manager daemon-reload
    $service_manager enable xray
    $service_manager start xray
    echo "环境配置完成。"
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ IPv6相关函数                               │
# └─────────────────────────────────────────────┘
generate_random_hex() {
    local length=$1
    head -c $((length/2)) /dev/urandom | hexdump -ve '1/1 "%.2x"'
}

get_main_interface() {
    MAIN_INTERFACE=$(ip route | grep default | awk '{print $5}' | head -n1)
    if [ -z "$MAIN_INTERFACE" ]; then
        echo -e "${RED}错误: 无法检测到主网卡${NC}"
        return 1
    fi
    echo $MAIN_INTERFACE
}

get_ipv6_prefix() {
    local interface=$1

    # 获取非本地IPv6地址
    local current_ipv6=$(ip -6 addr show dev $interface | grep "scope global" | grep -v "temporary" | head -n1 | awk '{print $2}')

    if [ -z "$current_ipv6" ]; then
        echo -e "${RED}错误: 未检测到IPv6地址${NC}" >&2
        return 1
    fi

    # 从CIDR格式中提取地址部分
    local ipv6_addr=$(echo "$current_ipv6" | cut -d'/' -f1)

    # 提取前缀（前64位）
    local prefix=$(echo "$ipv6_addr" | sed -E 's/:[^:]+:[^:]+:[^:]+:[^:]+$/::/')

    if [ -z "$prefix" ]; then
        echo -e "${RED}错误: 无法提取IPv6前缀${NC}" >&2
        return 1
    fi

    echo "$prefix"
}

add_ipv6_addresses() {
    local interface=$1
    local prefix=$2
    local num=$3

    echo -e "${YELLOW}准备添加IPv6地址:${NC}"
    echo "使用网络接口: $interface"
    echo "使用IPv6前缀: $prefix"
    echo "计划添加数量: $num"

    # 获取现有地址列表
    declare -A existing_addresses
    while read -r addr; do
        existing_addresses["$addr"]=1
    done < <(ip -6 addr show dev $interface | grep "inet6" | grep -v "fe80" | awk '{print $2}' | cut -d'/' -f1)

    # 显示当前地址
    echo -e "\n${YELLOW}当前IPv6地址:${NC}"
    ip -6 addr show dev $interface

    count=0
    attempts=0
    max_attempts=$((num * 3))  # 设置最大尝试次数

    while [ $count -lt $num ] && [ $attempts -lt $max_attempts ]; do
        ((attempts++))

        # 生成后四组十六进制数
        suffix=$(printf "%04x:%04x:%04x:%04x" \
            $((RANDOM % 65536)) \
            $((RANDOM % 65536)) \
            $((RANDOM % 65536)) \
            $((RANDOM % 65536)))

        # 构建完整的IPv6地址
        NEW_IPV6="${prefix%::}:${suffix}"

        # 检查是否已存在
        if [ "${existing_addresses[$NEW_IPV6]}" == "1" ]; then
            echo -e "${YELLOW}地址已存在，重新生成: $NEW_IPV6${NC}"
            continue
        fi

        echo -e "\n${YELLOW}尝试添加新地址: $NEW_IPV6${NC}"
        if ip -6 addr add "$NEW_IPV6/64" dev "$interface" 2>/dev/null; then
            echo -e "${GREEN}成功添加IPv6地址: $NEW_IPV6${NC}"
            existing_addresses["$NEW_IPV6"]=1
            ((count++))

            # 创建持久化配置
            mkdir -p /etc/network/interfaces.d
            echo "iface $interface inet6 static" >> /etc/network/interfaces.d/60-ipv6-addresses
            echo "    address $NEW_IPV6/64" >> /etc/network/interfaces.d/60-ipv6-addresses
            echo "" >> /etc/network/interfaces.d/60-ipv6-addresses
        else
            echo -e "${RED}添加地址失败: $NEW_IPV6${NC}"
        fi
    done

    if [ $count -lt $num ]; then
        echo -e "${RED}警告: 只成功添加了 $count 个地址（目标: $num）${NC}"
    fi

    # 显示最终结果
    echo -e "\n${YELLOW}更新后的IPv6地址:${NC}"
    ip -6 addr show dev $interface

    # 确保配置文件存在
    if [ ! -f "/etc/network/interfaces" ]; then
        echo "auto lo" > /etc/network/interfaces
        echo "iface lo inet loopback" >> /etc/network/interfaces
        echo "" >> /etc/network/interfaces
    fi

    # 添加 source 指令（如果不存在）
    if ! grep -q "source /etc/network/interfaces.d/*" /etc/network/interfaces; then
        echo "source /etc/network/interfaces.d/*" >> /etc/network/interfaces
    fi
}

delete_all_ipv6() {
    local interface=$1

    CONFIG_FILE="/etc/network/interfaces.d/60-ipv6-addresses"
    if [ -f "$CONFIG_FILE" ]; then
        rm -f "$CONFIG_FILE"
        echo -e "${GREEN}已删除配置文件${NC}"
    fi

    for addr in $(ip -6 addr show dev $interface | grep "inet6" | grep -v "fe80" | awk '{print $2}'); do
        ip -6 addr del $addr dev $interface
        echo -e "${YELLOW}已删除IPv6地址: $addr${NC}"
    done

    echo -e "${GREEN}所有配置的IPv6地址已删除${NC}"
}

show_current_ipv6() {
    local interface=$1
    echo -e "${YELLOW}当前IPv6地址列表：${NC}"
    local ipv6_list=$(ip -6 addr show dev $interface | grep "inet6" | grep -v "fe80")
    if [ -z "$ipv6_list" ]; then
        echo -e "${RED}未检测到任何IPv6地址${NC}"
        return 1
    fi
    echo "$ipv6_list"
}

# ┌─────────────────────────────────────────────┐
# │ 策略配置生成模块                           │
# └─────────────────────────────────────────────┘
# 检查端口有效性
check_port() {
    local port=$1
    if ! [[ "$port" =~ ^[0-9]+$ ]] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
        echo -e "${RED}无效的端口号: $port${NC}"
        return 1
    fi
    return 0
}

# 策略选择函数
select_strategy() {
    echo -e "\n${YELLOW}请选择IP策略组：${NC}"
    echo "1. IPv4策略组"
    echo "   - 策略1：同IP进出"
    echo "   - 策略2：随机IPv4出"
    echo "2. IPv6策略组"
    echo "   - 策略3：随机IPv6出"
    echo "   - 策略4：固定IPv6出"
    
    read -p "请选择策略组 [1-2]: " strategy_choice
    
    case $strategy_choice in
        1)
            echo -e "\n${YELLOW}IPv4策略组配置：${NC}"
            read -p "是否启用策略1(同IP进出)? (y/n): " enable_strategy1
            read -p "是否启用策略2(随机IPv4出)? (y/n): " enable_strategy2
            read -p "是否为这些策略启用Vmess? (y/n): " enable_vmess
            
            if [[ "$enable_vmess" == "y" ]]; then
                read -p "请输入Vmess端口偏移量(默认1000): " vmess_offset
                vmess_offset=${vmess_offset:-1000}
            fi
            
            if [[ "$enable_strategy1" == "y" ]]; then
                read -p "请输入策略1的SOCKS5端口: " port1
            fi
            if [[ "$enable_strategy2" == "y" ]]; then
                read -p "请输入策略2的SOCKS5端口: " port2
            fi
            
            generate_xray_config "1,2" "$port1" "$port2" "$socks_user" "$socks_pass" \
                               "$enable_strategy1" "$enable_strategy2" "$enable_vmess" "$vmess_offset"
            ;;
            
        2)
            echo -e "\n${YELLOW}IPv6策略组配置：${NC}"
            read -p "是否启用策略3(随机IPv6出)? (y/n): " enable_strategy3
            read -p "是否启用策略4(固定IPv6出)? (y/n): " enable_strategy4
            read -p "是否为这些策略启用Vmess? (y/n): " enable_vmess
            
            if [[ "$enable_vmess" == "y" ]]; then
                read -p "请输入Vmess端口偏移量(默认1000): " vmess_offset
                vmess_offset=${vmess_offset:-1000}
            fi
            
            if [[ "$enable_strategy3" == "y" ]]; then
                read -p "请输入策略3的SOCKS5端口: " port1
            fi
            if [[ "$enable_strategy4" == "y" ]]; then
                read -p "请输入策略4的起始端口: " port2
                read -p "请输入策略4需要的端口数量: " port_count
            fi
            
            generate_xray_config "3,4" "$port1" "$port2" "$socks_user" "$socks_pass" \
                               "$enable_strategy3" "$enable_strategy4" "$enable_vmess" "$vmess_offset" "$port_count"
            ;;
            
        *)
            echo -e "${RED}无效的选项${NC}"
            return 1
            ;;
    esac
}

# 生成Xray配置
generate_xray_config() {
    local strategy_group=$1
    local socks_port1=$2
    local socks_port2=$3
    local socks_user=$4
    local socks_pass=$5
    local enable_strategy1=$6
    local enable_strategy2=$7
    local enable_vmess=$8
    local vmess_offset=${9:-1000}
    local port_count=${10:-1}
    
    local vmess_uuid=""
    if [[ "$enable_vmess" == "y" ]]; then
        vmess_uuid=$(cat /proc/sys/kernel/random/uuid)
        echo -e "${GREEN}已生成Vmess UUID: $vmess_uuid${NC}"
    fi
    
    echo -e "${YELLOW}开始生成配置文件...${NC}"
    mkdir -p /etc/xray
    
    case $strategy_group in
        "1,2")
            cat > /etc/xray/serve.json <<EOF
{
    "inbounds": [
EOF
            first_inbound=true
            
            # 策略1：同IP进出
            if [[ "$enable_strategy1" == "y" ]]; then
                for ip in "${ipv4_addrs[@]}"; do
                    if [ "$first_inbound" = true ]; then
                        first_inbound=false
                    else
                        echo "," >> /etc/xray/serve.json
                    fi
                    
                    # SOCKS5配置
                    cat >> /etc/xray/serve.json <<EOF
        {
            "listen": "$ip",
            "port": $socks_port1,
            "protocol": "socks",
            "tag": "socks_in_$ip",
            "settings": {
                "auth": "password",
                "udp": true,
                "ip": "$ip",
                "accounts": [{
                    "user": "$socks_user",
                    "pass": "$socks_pass"
                }]
            }
        }
EOF
                    
                    # Vmess配置（如果启用）
                    if [[ "$enable_vmess" == "y" ]]; then
                        cat >> /etc/xray/serve.json <<EOF
        ,{
            "listen": "$ip",
            "port": $((socks_port1 + vmess_offset)),
            "protocol": "vmess",
            "tag": "vmess_in_$ip",
            "settings": {
                "clients": [{
                    "id": "$vmess_uuid",
                    "alterId": 0
                }]
            }
        }
EOF
                    fi
                done
            fi
            
            # 策略2：随机IPv4出
            if [[ "$enable_strategy2" == "y" ]]; then
                if [ "$first_inbound" = false ]; then
                    echo "," >> /etc/xray/serve.json
                fi
                
                # SOCKS5随机出站
                cat >> /etc/xray/serve.json <<EOF
        {
            "listen": "0.0.0.0",
            "port": $socks_port2,
            "protocol": "socks",
            "tag": "random_ipv4_socks",
            "settings": {
                "auth": "password",
                "udp": true,
                "accounts": [{"user": "$socks_user", "pass": "$socks_pass"}]
            }
        }
EOF
                
                # Vmess随机出站（如果启用）
                if [[ "$enable_vmess" == "y" ]]; then
                    cat >> /etc/xray/serve.json <<EOF
        ,{
            "listen": "0.0.0.0",
            "port": $((socks_port2 + vmess_offset)),
            "protocol": "vmess",
            "tag": "random_ipv4_vmess",
            "settings": {
                "clients": [{
                    "id": "$vmess_uuid",
                    "alterId": 0
                }]
            }
        }
EOF
                fi
            fi

            # 写入出站配置
            cat >> /etc/xray/serve.json <<EOF
    ],
    "outbounds": [
EOF
            first_outbound=true
            for ip in "${ipv4_addrs[@]}"; do
                if [ "$first_outbound" = true ]; then
                    first_outbound=false
                else
                    echo "," >> /etc/xray/serve.json
                fi
                
                cat >> /etc/xray/serve.json <<EOF
        {
            "protocol": "freedom",
            "tag": "out_$ip",
            "settings": { "domainStrategy": "UseIPv4" },
            "streamSettings": { "sockopt": { "mark": 255 } },
            "sendThrough": "$ip"
        }
EOF
            done

            # 写入路由规则
            cat >> /etc/xray/serve.json <<EOF
    ],
    "routing": {
        "rules": [
EOF
            first_rule=true

            # 策略1路由规则
            if [[ "$enable_strategy1" == "y" ]]; then
                for ip in "${ipv4_addrs[@]}"; do
                    if [ "$first_rule" = true ]; then
                        first_rule=false
                    else
                        echo "," >> /etc/xray/serve.json
                    fi
                    
                    cat >> /etc/xray/serve.json <<EOF
            {
                "type": "field",
                "inboundTag": ["socks_in_$ip"],
                "outboundTag": "out_$ip"
            }
EOF
                    if [[ "$enable_vmess" == "y" ]]; then
                        cat >> /etc/xray/serve.json <<EOF
            ,{
                "type": "field",
                "inboundTag": ["vmess_in_$ip"],
                "outboundTag": "out_$ip"
            }
EOF
                    fi
                done
            fi

            # 策略2路由规则
            if [[ "$enable_strategy2" == "y" ]]; then
                if [ "$first_rule" = false ]; then
                    echo "," >> /etc/xray/serve.json
                fi
                cat >> /etc/xray/serve.json <<EOF
            {
                "type": "field",
                "inboundTag": ["random_ipv4_socks"],
                "balancerTag": "ipv4_balancer"
            }
EOF
                if [[ "$enable_vmess" == "y" ]]; then
                    cat >> /etc/xray/serve.json <<EOF
            ,{
                "type": "field",
                "inboundTag": ["random_ipv4_vmess"],
                "balancerTag": "ipv4_balancer"
            }
EOF
                fi
            fi

            # 添加负载均衡器配置
            if [[ "$enable_strategy2" == "y" ]]; then
                cat >> /etc/xray/serve.json <<EOF
        ],
        "balancers": [
            {
                "tag": "ipv4_balancer",
                "selector": [$(printf '"out_%s",' "${ipv4_addrs[@]}" | sed 's/,$//')],
                "strategy": {
                    "type": "random"
                }
            }
        ]
EOF
            else
                cat >> /etc/xray/serve.json <<EOF
        ]
EOF
            fi

            # 完成配置文件
            cat >> /etc/xray/serve.json <<EOF
    }
}
EOF
            ;;
            
        "3,4")
            # IPv6策略组配置
            cat > /etc/xray/serve.json <<EOF
{
    "inbounds": [
EOF
            first_inbound=true

            # 策略3：随机IPv6出
            if [[ "$enable_strategy3" == "y" ]]; then
                cat >> /etc/xray/serve.json <<EOF
        {
            "listen": "${ipv4_addrs[0]}",
            "port": $socks_port1,
            "protocol": "socks",
            "tag": "random_ipv6_socks",
            "settings": {
                "auth": "password",
                "udp": true,
                "accounts": [{"user": "$socks_user", "pass": "$socks_pass"}]
            }
        }
EOF
                first_inbound=false

                if [[ "$enable_vmess" == "y" ]]; then
                    cat >> /etc/xray/serve.json <<EOF
        ,{
            "listen": "${ipv4_addrs[0]}",
            "port": $((socks_port1 + vmess_offset)),
            "protocol": "vmess",
            "tag": "random_ipv6_vmess",
            "settings": {
                "clients": [{
                    "id": "$vmess_uuid",
                    "alterId": 0
                }]
            }
        }
EOF
                fi
            fi

            # 策略4：固定IPv6出
            if [[ "$enable_strategy4" == "y" ]]; then
                for ((i=0; i<port_count; i++)); do
                    current_port=$((socks_port2 + i))
                    if [ "$first_inbound" = false ]; then
                        echo "," >> /etc/xray/serve.json
                    fi
                    first_inbound=false

                    cat >> /etc/xray/serve.json <<EOF
        {
            "listen": "0.0.0.0",
            "port": $current_port,
            "protocol": "socks",
            "tag": "fixed_ipv6_${current_port}",
            "settings": {
                "auth": "password",
                "udp": true,
                "accounts": [{"user": "$socks_user", "pass": "$socks_pass"}]
            }
        }
EOF
                    if [[ "$enable_vmess" == "y" ]]; then
                        cat >> /etc/xray/serve.json <<EOF
        ,{
            "listen": "0.0.0.0",
            "port": $((current_port + vmess_offset)),
            "protocol": "vmess",
            "tag": "fixed_ipv6_vmess_${current_port}",
            "settings": {
                "clients": [{
                    "id": "$vmess_uuid",
                    "alterId": 0
                }]
            }
        }
EOF
                    fi
                done
            fi

            # 写入出站配置
            cat >> /etc/xray/serve.json <<EOF
    ],
    "outbounds": [
EOF
            first_outbound=true
            for ipv6 in "${ipv6_addrs[@]}"; do
                if [ "$first_outbound" = true ]; then
                    first_outbound=false
                else
                    echo "," >> /etc/xray/serve.json
                fi
                
                cat >> /etc/xray/serve.json <<EOF
        {
            "protocol": "freedom",
            "tag": "out_${ipv6}",
            "settings": {"domainStrategy": "UseIPv6"},
            "streamSettings": {"sockopt": {"mark": 255}},
            "sendThrough": "$ipv6"
        }
EOF
            done

            # 写入路由规则
            cat >> /etc/xray/serve.json <<EOF
    ],
    "routing": {
        "rules": [
EOF
            first_rule=true

            # 策略3路由规则
            if [[ "$enable_strategy3" == "y" ]]; then
                cat >> /etc/xray/serve.json <<EOF
            {
                "type": "field",
                "inboundTag": ["random_ipv6_socks"],
                "balancerTag": "ipv6_balancer"
            }
EOF
                first_rule=false

                if [[ "$enable_vmess" == "y" ]]; then
                    cat >> /etc/xray/serve.json <<EOF
            ,{
                "type": "field",
                "inboundTag": ["random_ipv6_vmess"],
                "balancerTag": "ipv6_balancer"
            }
EOF
                fi
            fi

            # 策略4路由规则
            if [[ "$enable_strategy4" == "y" ]]; then
                for ((i=0; i<port_count && i<${#ipv6_addrs[@]}; i++)); do
                    current_port=$((socks_port2 + i))
                    current_ipv6="${ipv6_addrs[$i]}"
                    
                    if [ "$first_rule" = false ]; then
                        echo "," >> /etc/xray/serve.json
                    fi
                    first_rule=false

                    cat >> /etc/xray/serve.json <<EOF
            {
                "type": "field",
                "inboundTag": ["fixed_ipv6_${current_port}"],
                "outboundTag": "out_${current_ipv6}"
            }
EOF
                    if [[ "$enable_vmess" == "y" ]]; then
                        cat >> /etc/xray/serve.json <<EOF
            ,{
                "type": "field",
                "inboundTag": ["fixed_ipv6_vmess_${current_port}"],
                "outboundTag": "out_${current_ipv6}"
            }
EOF
                    fi
                done
            fi

            # 添加负载均衡器配置（如果启用了策略3）
            if [[ "$enable_strategy3" == "y" ]]; then
                cat >> /etc/xray/serve.json <<EOF
        ],
        "balancers": [
            {
                "tag": "ipv6_balancer",
                "selector": [$(printf '"out_%s",' "${ipv6_addrs[@]}" | sed 's/,$//')],
                "strategy": {
                    "type": "random"
                }
            }
        ]
EOF
            else
                cat >> /etc/xray/serve.json <<EOF
        ]
EOF
            fi

            # 完成配置文件
            cat >> /etc/xray/serve.json <<EOF
    }
}
EOF
            ;;
    esac

    # 生成配置信息文件
    if [[ "$enable_vmess" == "y" ]]; then
        echo "Vmess配置信息：" > /root/vmess_info.txt
        echo "UUID: $vmess_uuid" >> /root/vmess_info.txt
        
        case $strategy_group in
            "1,2")
                if [[ "$enable_strategy1" == "y" ]]; then
                    echo "策略1 Vmess端口: $((socks_port1 + vmess_offset))" >> /root/vmess_info.txt
                fi
                if [[ "$enable_strategy2" == "y" ]]; then
                    echo "策略2 Vmess端口: $((socks_port2 + vmess_offset))" >> /root/vmess_info.txt
                fi
                ;;
            "3,4")
                if [[ "$enable_strategy3" == "y" ]]; then
                    echo "策略3 Vmess端口: $((socks_port1 + vmess_offset))" >> /root/vmess_info.txt
                fi
                if [[ "$enable_strategy4" == "y" ]]; then
                    for ((i=0; i<port_count; i++)); do
                        current_port=$((socks_port2 + i))
                        echo "策略4 Vmess端口 $i: $((current_port + vmess_offset))" >> /root/vmess_info.txt
                    done
                fi
                ;;
        esac
    fi

    # 生成代理列表
    generate_proxy_list "$strategy_group" "$socks_port1" "$socks_port2" "$socks_user" "$socks_pass" \
                       "$enable_strategy1" "$enable_strategy2" "$enable_strategy3" "$enable_strategy4" \
                       "$enable_vmess" "$vmess_uuid" "$vmess_offset" "$port_count"

    # 验证配置文件
    echo -e "${YELLOW}验证配置文件...${NC}"
    if ! /usr/local/bin/xray -test -config /etc/xray/serve.json; then
        echo -e "${RED}配置文件验证失败${NC}"
        return 1
    fi
    
    echo -e "${GREEN}配置文件生成成功${NC}"
    return 0
}

# 生成代理列表
generate_proxy_list() {
    local strategy_group=$1
    local socks_port1=$2
    local socks_port2=$3
    local socks_user=$4
    local socks_pass=$5
    local enable_strategy1=$6
    local enable_strategy2=$7
    local enable_strategy3=$8
    local enable_strategy4=$9
    local enable_vmess=${10}
    local vmess_uuid=${11}
    local vmess_offset=${12}
    local port_count=${13}
    
    echo -e "${YELLOW}生成代理列表...${NC}"
    
    # 创建SOCKS5代理列表
    echo "# SOCKS5代理列表" > /root/proxy_list.txt
    echo "# 格式：IP:端口:用户名:密码" >> /root/proxy_list.txt
    
    case $strategy_group in
        "1,2")
            if [[ "$enable_strategy1" == "y" ]]; then
                for ip in "${ipv4_addrs[@]}"; do
                    echo "$ip:$socks_port1:$socks_user:$socks_pass" >> /root/proxy_list.txt
                done
            fi
            if [[ "$enable_strategy2" == "y" ]]; then
                echo "${ipv4_addrs[0]}:$socks_port2:$socks_user:$socks_pass" >> /root/proxy_list.txt
            fi
            ;;
        "3,4")
            if [[ "$enable_strategy3" == "y" ]]; then
                echo "${ipv4_addrs[0]}:$socks_port1:$socks_user:$socks_pass" >> /root/proxy_list.txt
            fi
            if [[ "$enable_strategy4" == "y" ]]; then
                for ((i=0; i<port_count; i++)); do
                    current_port=$((socks_port2 + i))
                    echo "0.0.0.0:$current_port:$socks_user:$socks_pass" >> /root/proxy_list.txt
                done
            fi
            ;;
    esac
    
    # 如果启用了Vmess，创建Vmess配置列表
    if [[ "$enable_vmess" == "y" ]]; then
        echo "# Vmess代理列表" > /root/vmess_list.txt
        echo "# 格式：IP:端口:UUID" >> /root/vmess_list.txt
        
        case $strategy_group in
            "1,2")
                if [[ "$enable_strategy1" == "y" ]]; then
                    for ip in "${ipv4_addrs[@]}"; do
                        echo "$ip:$((socks_port1 + vmess_offset)):$vmess_uuid" >> /root/vmess_list.txt
                    done
                fi
                if [[ "$enable_strategy2" == "y" ]]; then
                    echo "${ipv4_addrs[0]}:$((socks_port2 + vmess_offset)):$vmess_uuid" >> /root/vmess_list.txt
                fi
                ;;
            "3,4")
                if [[ "$enable_strategy3" == "y" ]]; then
                    echo "${ipv4_addrs[0]}:$((socks_port1 + vmess_offset)):$vmess_uuid" >> /root/vmess_list.txt
                fi
                if [[ "$enable_strategy4" == "y" ]]; then
                    for ((i=0; i<port_count; i++)); do
                        current_port=$((socks_port2 + i))
                        echo "0.0.0.0:$((current_port + vmess_offset)):$vmess_uuid" >> /root/vmess_list.txt
                    done
                fi
                ;;
        esac
    fi
    
    echo -e "${GREEN}代理列表生成完成${NC}"
    echo -e "SOCKS5代理列表：/root/proxy_list.txt"
    if [[ "$enable_vmess" == "y" ]]; then
        echo -e "Vmess代理列表：/root/vmess_list.txt"
    fi
}


# ┌─────────────────────────────────────────────┐
# │ 主配置函数                                 │
# └─────────────────────────────────────────────┘
configure_ip_strategy() {
    local strategy=$1
    
    mkdir -p /etc/xray
    
    case "$strategy" in
        "1")
            generate_config_strategy_1
            ;;
        "2")
            generate_config_strategy_2
            ;;
        "3")
            generate_config_strategy_3
            ;;
        "4")
            if [ -z "$2" ] || [ -z "$3" ]; then
                echo -e "${RED}错误：策略4需要端口映射和端口数量参数${NC}"
                return 1
            fi
            generate_config_strategy_4 "$2" "$3"
            ;;
        *)
            echo -e "${RED}无效的策略选择${NC}"
            return 1
            ;;
    esac

    # 验证配置
    echo -e "${YELLOW}验证配置文件...${NC}"
    if ! /usr/local/bin/xray -test -config /etc/xray/serve.json; then
        echo -e "${RED}配置验证失败${NC}"
        return 1
    fi

    # 重启 Xray 服务
    systemctl restart xray
    sleep 2

    if ! systemctl is-active --quiet xray; then
        echo -e "${RED}Xray 服务启动失败${NC}"
        systemctl status xray
        return 1
    fi

    echo -e "${GREEN}IP策略设置完成并成功启动服务${NC}"
}

# ┌─────────────────────────────────────────────┐
# │ IP进出策略执行模块                          │
# └─────────────────────────────────────────────┘

# 全局变量
declare -a ipv4_addrs
declare -a ipv6_addrs

# 获取系统IP地址
get_system_ips() {
    # 获取IPv4地址
    ipv4_addrs=()
    while IFS= read -r ip; do
        ipv4_addrs+=("$ip")
    done < <(ip -4 addr show | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | grep -v '127.0.0.1')

    # 获取IPv6地址
    ipv6_addrs=()
    while IFS= read -r ip; do
        ipv6_addrs+=("$ip")
    done < <(ip -6 addr show | grep -oP '(?<=inet6\s)[\da-f:]+' | grep -v '^fe80' | grep -v '^::1')
}

# 执行IP策略配置
set_ip_strategy() {
    # 获取系统IP
    get_system_ips

    # 显示当前IP信息
    echo -e "${YELLOW}当前系统IP信息：${NC}"
    echo -e "IPv4地址："
    for ip in "${ipv4_addrs[@]}"; do
        echo -e "${GREEN}-> $ip${NC}"
    done
    echo -e "\nIPv6地址："
    for ip in "${ipv6_addrs[@]}"; do
        echo -e "${GREEN}-> $ip${NC}"
    done

    # 获取SOCKS5凭据
    echo -e "\n设置SOCKS5凭据："
    read -p "请输入用户名: " socks_user
    read -p "请输入密码: " socks_pass

    # 选择策略组
    echo -e "\n请选择IP策略组："
    echo "1. IPv4策略组（同IP进出 + 随机IPv4出）"
    echo "2. IPv6策略组（随机IPv6出 + 固定IPv6出）"
    read -p "请输入选项 [1-2]: " strategy_choice

    case $strategy_choice in
        1)
            echo -e "\nIPv4策略组配置："
            read -p "请输入策略1(同IP进出)的端口: " port1
            read -p "请输入策略2(随机IPv4出)的端口: " port2
            generate_xray_config "1,2" "$port1" "$port2" "$socks_user" "$socks_pass"
            ;;
        2)
            echo -e "\nIPv6策略组配置："
            read -p "请输入策略3(随机IPv6出)的端口: " port1
            read -p "请输入策略4(固定IPv6出)起始端口: " port2
            read -p "请输入策略4需要的端口数量: " port_count
            generate_xray_config "3,4" "$port1" "$port2" "$socks_user" "$socks_pass" "$port_count"
            ;;
        *)
            echo -e "${RED}无效的选项${NC}"
            return 1
            ;;
    esac

    # 验证配置文件
    echo "验证配置文件..."
    if ! /usr/local/bin/xray -test -config /etc/xray/serve.json; then
        echo -e "${RED}配置文件验证失败${NC}"
        return 1
    fi

    # 重启服务
    systemctl restart xray
    echo -e "${GREEN}IP策略设置完成并成功启动服务${NC}"
}


# ┌─────────────────────────────────────────────┐
# │ 代理管理模块                               │
# └─────────────────────────────────────────────┘
generate_proxy_list() {
    local strategy_group=$1
    local port1=$2
    local port2=$3
    local socks_user=$4
    local socks_pass=$5
    local port_count=${6:-1}
    local output_file="/root/proxy_list.txt"
    local temp_file="/tmp/proxy_list.tmp"
    
    echo -e "${YELLOW}开始生成代理列表...${NC}"
    echo -n "" > "$temp_file"

    # 策略组说明
    local strategy_desc=""
    case $strategy_group in
        "1,2") strategy_desc="IPv4策略组（同IP进出 + 随机IPv4出）";;
        "3,4") strategy_desc="IPv6策略组（随机IPv6出 + 固定IPv6出）";;
        *) strategy_desc="未知策略组";;
    esac

    echo -e "${GREEN}当前策略组：${strategy_desc}${NC}"

    # 根据不同策略组生成代理列表
    case $strategy_group in
        "1,2")
            # 策略1：同IP进出
            echo -e "${YELLOW}生成同IP进出代理列表...${NC}"
            for ip in "${ipv4_addrs[@]}"; do
                echo "$ip:$port1:$socks_user:$socks_pass" >> "$temp_file"
                echo -e "${GREEN}添加代理: $ip:$port1${NC}"
            done
            
            # 策略2：随机IPv4出
            echo -e "${YELLOW}生成随机IPv4出站代理列表...${NC}"
            echo "${ipv4_addrs[0]}:$port2:$socks_user:$socks_pass" >> "$temp_file"
            echo -e "${GREEN}添加代理: ${ipv4_addrs[0]}:$port2${NC}"
            
            # 显示可用的出站地址
            echo -e "${YELLOW}可用随机IPv4出站地址:${NC}"
            for ip in "${ipv4_addrs[@]}"; do
                echo -e "${GREEN}-> $ip${NC}"
            done
            ;;
            
        "3,4")
            # 策略3：随机IPv6出
            echo -e "${YELLOW}生成随机IPv6出站代理列表...${NC}"
            echo "${ipv4_addrs[0]}:$port1:$socks_user:$socks_pass" >> "$temp_file"
            echo -e "${GREEN}添加代理: ${ipv4_addrs[0]}:$port1${NC}"
            
            # 策略4：固定IPv6出
            echo -e "${YELLOW}生成固定IPv6出站代理列表...${NC}"
            for ((i=0; i<port_count; i++)); do
                current_port=$((port2 + i))
                echo "${ipv4_addrs[0]}:$current_port:$socks_user:$socks_pass" >> "$temp_file"
                echo -e "${GREEN}添加代理: ${ipv4_addrs[0]}:$current_port${NC}"
            done
            
            # 显示可用的IPv6地址
            echo -e "${YELLOW}可用IPv6出站地址:${NC}"
            for ip in "${ipv6_addrs[@]}"; do
                echo -e "${GREEN}-> $ip${NC}"
            done
            ;;
            
        *)
            echo -e "${RED}错误：无效的策略组${NC}"
            rm -f "$temp_file"
            return 1
            ;;
    esac

    # 检查是否有代理生成
    if [ ! -s "$temp_file" ]; then
        echo -e "${RED}错误：未能生成任何代理地址${NC}"
        rm -f "$temp_file"
        return 1
    fi

    # 移动到最终位置
    mv "$temp_file" "$output_file"

    # 显示结果统计
    echo -e "\n${GREEN}代理列表生成完成：${NC}"
    echo -e "策略组: ${strategy_desc}"
    echo -e "代理列表文件：${output_file}"
    
    # 显示统计信息
    local total_count=$(wc -l < "$output_file")
    echo -e "\n${YELLOW}代理统计信息：${NC}"
    echo -e "总代理数量: ${total_count}"
    
    case $strategy_group in
        "1,2")
            echo -e "策略1端口: $port1"
            echo -e "策略2端口: $port2"
            echo -e "IPv4地址数量: ${#ipv4_addrs[@]}"
            ;;
        "3,4")
            echo -e "策略3端口: $port1"
            echo -e "策略4起始端口: $port2"
            echo -e "策略4端口数量: $port_count"
            echo -e "可用IPv6地址数量: ${#ipv6_addrs[@]}"
            ;;
    esac

    # 显示文件内容预览
    echo -e "\n${YELLOW}代理列表预览：${NC}"
    if [ $total_count -gt 10 ]; then
        echo -e "${GREEN}前5行：${NC}"
        head -n 5 "$output_file"
        echo -e "..."
        echo -e "${GREEN}后5行：${NC}"
        tail -n 5 "$output_file"
    else
        cat "$output_file"
    fi

    echo -e "\n${GREEN}代理列表生成完成！${NC}"
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ 代理设置模块                               │
# └─────────────────────────────────────────────┘

# SOCKS5默认凭据
DEFAULT_USER="pnqu4x"
DEFAULT_PASS="zqgzNK3LRS"

# 全局变量
socks_user=$DEFAULT_USER
socks_pass=$DEFAULT_PASS

# SOCKS5凭据设置
set_socks5_credentials() {
    # 显示当前凭据
    echo -e "${YELLOW}当前SOCKS5凭据：${NC}"
    echo -e "用户名: ${GREEN}$socks_user${NC}"
    echo -e "密码: ${GREEN}$socks_pass${NC}"
    
    # 询问是否需要修改
    read -p "是否需要修改凭据？(y/n): " change_config
    if [[ "$change_config" == "y" ]]; then
        read -p "请输入用户名 (默认: $socks_user): " new_user
        read -p "请输入密码 (默认: $socks_pass): " new_pass
        
        # 更新凭据（如果有输入）
        socks_user=${new_user:-$socks_user}
        socks_pass=${new_pass:-$socks_pass}
    fi

    # 保存凭据到文件
    mkdir -p /etc/xray
    cat > /etc/xray/config.env <<EOF
socks_user=$socks_user
socks_pass=$socks_pass
EOF

    echo -e "${GREEN}SOCKS5凭据已保存。${NC}"
    return 0
}

# 设置IP策略
set_ip_strategy() {
    # 检查是否已设置凭据，如果没有则设置
    if [ -z "$socks_user" ] || [ -z "$socks_pass" ]; then
        echo -e "${YELLOW}未检测到SOCKS5凭据，请先设置：${NC}"
        
        # 显示默认值
        echo -e "默认用户名: ${GREEN}$DEFAULT_USER${NC}"
        echo -e "默认密码: ${GREEN}$DEFAULT_PASS${NC}"
        
        # 询问是否使用默认值
        read -p "是否使用默认凭据？(y/n): " use_default
        if [[ "$use_default" != "y" ]]; then
            read -p "请输入用户名 (默认: $DEFAULT_USER): " new_user
            read -p "请输入密码 (默认: $DEFAULT_PASS): " new_pass
            
            # 更新凭据
            socks_user=${new_user:-$DEFAULT_USER}
            socks_pass=${new_pass:-$DEFAULT_PASS}
        else
            socks_user=$DEFAULT_USER
            socks_pass=$DEFAULT_PASS
        fi

        # 保存凭据到文件
        mkdir -p /etc/xray
        cat > /etc/xray/config.env <<EOF
socks_user=$socks_user
socks_pass=$socks_pass
EOF
        echo -e "${GREEN}SOCKS5凭据已保存。${NC}"
    fi

    # 获取系统IP
    get_system_ips

    # 显示当前IP信息
    echo -e "\n${YELLOW}当前系统IP信息：${NC}"
    echo -e "IPv4地址："
    for ip in "${ipv4_addrs[@]}"; do
        echo -e "${GREEN}-> $ip${NC}"
    done
    echo -e "\nIPv6地址："
    for ip in "${ipv6_addrs[@]}"; do
        echo -e "${GREEN}-> $ip${NC}"
    done

    # 显示当前使用的凭据
    echo -e "\n${YELLOW}当前SOCKS5凭据：${NC}"
    echo -e "用户名: ${GREEN}$socks_user${NC}"
    echo -e "密码: ${GREEN}$socks_pass${NC}"

    # 选择策略组
    echo -e "\n${YELLOW}请选择IP策略组：${NC}"
    echo "1. IPv4策略组（同IP进出 + 随机IPv4出）"
    echo "2. IPv6策略组（随机IPv6出 + 固定IPv6出）"
    read -p "请输入选项 [1-2]: " strategy_choice

    # 设置端口
    case $strategy_choice in
        1)
            echo -e "\n${YELLOW}配置IPv4策略组端口：${NC}"
            read -p "请输入策略1端口(同IP进出): " port1
            read -p "请输入策略2端口(随机IPv4出): " port2
            
            # 验证端口
            if ! check_port "$port1" || ! check_port "$port2"; then
                return 1
            fi
            
            generate_xray_config "1,2" "$port1" "$port2" "$socks_user" "$socks_pass"
            ;;
        2)
            echo -e "\n${YELLOW}配置IPv6策略组端口：${NC}"
            read -p "请输入策略3端口(随机IPv6出): " port1
            read -p "请输入策略4起始端口(固定IPv6出): " port2
            read -p "请输入策略4需要的端口数量: " port_count
            
            # 验证端口和端口数量
            if ! check_port "$port1" || ! check_port "$port2"; then
                return 1
            fi
            if [[ ! "$port_count" =~ ^[0-9]+$ ]] || [ "$port_count" -lt 1 ]; then
                echo -e "${RED}无效的端口数量${NC}"
                return 1
            fi
            
            generate_xray_config "3,4" "$port1" "$port2" "$socks_user" "$socks_pass" "$port_count"
            ;;
        *)
            echo -e "${RED}无效的选项${NC}"
            return 1
            ;;
    esac

    # 如果配置成功，重启服务
    if [ $? -eq 0 ]; then
        echo -e "\n${YELLOW}重启Xray服务...${NC}"
        systemctl restart xray
        if systemctl is-active --quiet xray; then
            echo -e "${GREEN}Xray服务已成功重启${NC}"
        else
            echo -e "${RED}Xray服务启动失败${NC}"
            return 1
        fi
    fi

    return 0
}

# 在脚本启动时加载已保存的凭据
load_saved_config() {
    if [ -f /etc/xray/config.env ]; then
        source /etc/xray/config.env
    fi
}

# 启动时加载配置
load_saved_config


# ┌─────────────────────────────────────────────┐
# │ 工具函数                                   │
# └─────────────────────────────────────────────┘
get_active_interfaces() {
    interfaces=$(ip -o link show | awk -F': ' '$2 != "lo" {print $2}')
    echo "检测到的活动网络接口: $interfaces"
    return 0
}

get_active_ip_count() {
    active_ip_count=$(hostname -I | wc -w)
    echo "当前活动的IP数量: $active_ip_count"
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ BBR加速模块                                │
# └─────────────────────────────────────────────┘
enable_bbr() {
    echo -e "${YELLOW}=== BBR加速配置 ===${NC}"
    
    # 检查内核版本和BBR支持
    if ! check_bbr_prerequisites; then
        return 1
    fi

    # 配置BBR
    echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf
    echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf
    sysctl -p

    # 验证BBR状态
    if verify_bbr_status; then
        echo -e "${GREEN}BBR加速已成功启用${NC}"
        show_bbr_status
    else
        echo -e "${RED}BBR加速启用失败${NC}"
        return 1
    fi
}

# BBR前置条件检查
check_bbr_prerequisites() {
    echo "检查BBR支持情况..."
    
    # 检查内核版本
    local kernel_version=$(uname -r | cut -d. -f1,2)
    if (( $(echo "$kernel_version < 4.9" | bc -l) )); then
        echo -e "${RED}当前内核版本 ($kernel_version) 过低，BBR需要4.9或更高版本${NC}"
        
        # 提供内核升级建议
        echo -e "${YELLOW}是否需要升级内核？(y/n)${NC}"
        read -r upgrade_kernel
        if [[ "$upgrade_kernel" == "y" ]]; then
            upgrade_kernel_for_bbr
        fi
        return 1
    fi

    # 检查BBR模块
    if ! modprobe tcp_bbr &>/dev/null; then
        echo -e "${RED}无法加载BBR模块${NC}"
        return 1
    fi

    return 0
}

# 内核升级函数
upgrade_kernel_for_bbr() {
    echo -e "${YELLOW}开始升级内核...${NC}"
    
    case "$ID" in
        "ubuntu"|"debian")
            apt-get update
            apt-get install -y linux-generic-hwe-$(lsb_release -rs)
            ;;
        "centos")
            yum install -y kernel-ml
            grub2-set-default 0
            ;;
        *)
            echo -e "${RED}不支持的系统${NC}"
            return 1
            ;;
    esac
    
    echo -e "${GREEN}内核已更新，请重启系统后重新运行脚本${NC}"
    read -p "是否现在重启？(y/n) " reboot_now
    [[ "$reboot_now" == "y" ]] && reboot
}

# 验证BBR状态
verify_bbr_status() {
    local tcp_control=$(sysctl net.ipv4.tcp_congestion_control | awk '{print $3}')
    local qdisc=$(sysctl net.core.default_qdisc | awk '{print $3}')
    
    [[ "$tcp_control" == "bbr" && "$qdisc" == "fq" ]]
}

# 显示BBR状态
show_bbr_status() {
    echo -e "\n${YELLOW}=== BBR状态信息 ===${NC}"
    echo -e "拥塞控制算法: $(sysctl net.ipv4.tcp_congestion_control | awk '{print $3}')"
    echo -e "队列调度算法: $(sysctl net.core.default_qdisc | awk '{print $3}')"
    echo -e "可用拥塞控制算法: $(cat /proc/sys/net/ipv4/tcp_available_congestion_control)"
    echo -e "内核版本: $(uname -r)"
    
    # 显示TCP性能参数
    echo -e "\n${YELLOW}TCP性能参数：${NC}"
    echo -e "TCP窗口大小: $(sysctl net.core.wmem_max | awk '{print $3}')"
    echo -e "TCP接收缓冲区: $(sysctl net.core.rmem_max | awk '{print $3}')"
    echo -e "TCP缓存大小: $(sysctl net.ipv4.tcp_mem | awk '{print $0}')"
}

# BBR管理菜单
bbr_manager_menu() {
    while true; do
        echo -e "\n${YELLOW}=== BBR加速管理 ===${NC}"
        echo "1. 启用BBR加速"
        echo "2. 检查BBR状态"
        echo "3. 优化TCP参数"
        echo "4. 禁用BBR"
        echo "0. 返回主菜单"

        read -p "请选择操作 [0-4]: " bbr_option

        case $bbr_option in
            1) enable_bbr ;;
            2) show_bbr_status ;;
            3) optimize_tcp_params ;;
            4) disable_bbr ;;
            0) return ;;
            *) echo -e "${RED}无效的选择${NC}" ;;
        esac

        echo -e "\n按回车键继续..."
        read
    done
}

# TCP参数优化
optimize_tcp_params() {
    echo -e "${YELLOW}优化TCP参数...${NC}"
    
    # 基础TCP参数优化
    cat > /etc/sysctl.d/99-tcp-tune.conf <<EOF
# TCP窗口相关设置
net.core.wmem_max = 16777216
net.core.rmem_max = 16777216
net.ipv4.tcp_wmem = 4096 87380 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216

# TCP连接相关优化
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_timestamps = 1

# TCP缓冲区优化
net.core.netdev_max_backlog = 65536
net.ipv4.tcp_max_syn_backlog = 8192
net.ipv4.tcp_max_tw_buckets = 5000

# TCP keepalive优化
net.ipv4.tcp_keepalive_time = 1200
net.ipv4.tcp_keepalive_intvl = 30
net.ipv4.tcp_keepalive_probes = 3
EOF

    sysctl -p /etc/sysctl.d/99-tcp-tune.conf
    echo -e "${GREEN}TCP参数优化完成${NC}"
}

# 禁用BBR
disable_bbr() {
    echo -e "${YELLOW}正在禁用BBR...${NC}"
    
    # 恢复默认TCP拥塞控制
    sed -i '/net.core.default_qdisc/d' /etc/sysctl.conf
    sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
    
    # 应用cubic算法
    echo "net.ipv4.tcp_congestion_control=cubic" >> /etc/sysctl.conf
    sysctl -p
    
    echo -e "${GREEN}BBR已禁用，已切换回默认的cubic算法${NC}"
}

# ┌─────────────────────────────────────────────┐
# │ 带宽控制相关函数                            │
# └─────────────────────────────────────────────┘

setup_bandwidth_control() {
    echo -e "${YELLOW}=== 带宽控制配置 ===${NC}"
    
    # 带宽输入处理
    read -p "请输入总带宽限制 (单位: M): " input_bandwidth
    if ! [[ "$input_bandwidth" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}错误：请输入有效的数字${NC}"
        return 1
    fi
    
    # 将M转换为Kbit (1M = 1024Kbit)
    TOTAL_BANDWIDTH=$((input_bandwidth * 1024))
    
    # 获取每个IP的保证带宽百分比
    read -p "请输入每个IP的最小保证带宽百分比 (1-100) [默认:10]: " GUARANTEE_PERCENT
    GUARANTEE_PERCENT=${GUARANTEE_PERCENT:-10}
    
    if ! [[ "$GUARANTEE_PERCENT" =~ ^[0-9]+$ ]] || [ "$GUARANTEE_PERCENT" -lt 1 ] || [ "$GUARANTEE_PERCENT" -gt 100 ]; then
        echo -e "${RED}错误：保证带宽百分比必须在1-100之间${NC}"
        return 1
    fi

    # 获取IP数量
    IP_COUNT=$(ip -o addr show | grep -v "scope host\|scope link" | wc -l)
    if [ $IP_COUNT -eq 0 ]; then
        echo -e "${RED}错误：未检测到有效IP地址${NC}"
        return 1
    fi

    # 计算每个IP的基础带宽和突发带宽
    BASE_BANDWIDTH=$((TOTAL_BANDWIDTH * GUARANTEE_PERCENT / 100 / IP_COUNT))
    BURST_BANDWIDTH=$((BASE_BANDWIDTH * 2))

    echo -e "\n当前系统配置："
    echo "总带宽: ${TOTAL_BANDWIDTH}Kbps"
    echo "IP数量: $IP_COUNT"
    echo "最小保证带宽比例: ${GUARANTEE_PERCENT}%"
    echo "每IP基础带宽: ${BASE_BANDWIDTH}Kbps"
    echo "突发带宽上限: ${BURST_BANDWIDTH}Kbps"

    # 获取主网络接口
    INTERFACE=$(ip route | grep default | awk '{print $5}' | head -n1)
    if [ -z "$INTERFACE" ]; then
        echo -e "${RED}错误：无法检测到网络接口${NC}"
        return 1
    fi

    echo -e "\n配置接口: $INTERFACE"

    # 清除现有的tc规则
    tc qdisc del dev $INTERFACE root 2>/dev/null

    # 创建根队列规则
    tc qdisc add dev $INTERFACE root handle 1: htb default 1

    # 创建主要类别
    tc class add dev $INTERFACE parent 1: classid 1:1 htb rate ${TOTAL_BANDWIDTH}kbit ceil ${TOTAL_BANDWIDTH}kbit

    # 为每个IP创建子类
    class_id=2
    for ip in $(ip -o addr show | grep -v "scope host\|scope link" | awk '{print $4}' | cut -d/ -f1); do
        echo -e "配置IP: $ip"
        
        # 创建带宽限制类
        tc class add dev $INTERFACE parent 1:1 classid 1:$class_id htb \
            rate $((BASE_BANDWIDTH))kbit \
            ceil $((BURST_BANDWIDTH))kbit

        # 根据IP类型添加过滤器
        if [[ $ip =~ ":" ]]; then
            # IPv6
            tc filter add dev $INTERFACE parent 1: protocol ipv6 prio 1 \
                u32 match ip6 dst $ip flowid 1:$class_id 2>/dev/null
        else
            # IPv4
            tc filter add dev $INTERFACE parent 1: protocol ip prio 1 \
                u32 match ip dst $ip flowid 1:$class_id 2>/dev/null
        fi

        ((class_id++))
    done

    # 创建带宽监控服务
    create_bandwidth_monitor_service

    echo -e "${GREEN}带宽控制规则配置完成${NC}"
    return 0
}

# 创建带宽监控服务
create_bandwidth_monitor_service() {
    cat > /etc/systemd/system/bandwidth-monitor.service << EOF
[Unit]
Description=Bandwidth Monitor Service
After=network.target

[Service]
Type=simple
ExecStart=/bin/bash -c 'while true; do clear; echo "=== 带宽使用情况 ==="; tc -s class show dev $INTERFACE; sleep 5; done'
Restart=always

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable bandwidth-monitor
    systemctl restart bandwidth-monitor
    echo "带宽监控服务已启动"
    echo "使用以下命令查看监控："
    echo "journalctl -u bandwidth-monitor -f"
}

# 显示当前带宽状态
show_bandwidth_status() {
    INTERFACE=$(ip route | grep default | awk '{print $5}' | head -n1)
    if [ -z "$INTERFACE" ]; then
        echo -e "${RED}错误：无法检测到网络接口${NC}"
        return 1
    fi

    echo -e "${YELLOW}当前带宽配置：${NC}"
    tc -s class show dev $INTERFACE
    
    echo -e "\n${YELLOW}当前过滤器配置：${NC}"
    tc filter show dev $INTERFACE
}

# 调整现有带宽限制
adjust_bandwidth_limits() {
    INTERFACE=$(ip route | grep default | awk '{print $5}' | head -n1)
    if [ -z "$INTERFACE" ]; then
        echo -e "${RED}错误：无法检测到网络接口${NC}"
        return 1
    fi

    # 显示当前配置
    echo -e "${YELLOW}当前配置：${NC}"
    tc -s class show dev $INTERFACE

    # 获取新的带宽设置
    read -p "请输入新的总带宽限制 (单位: M): " new_bandwidth
    if ! [[ "$new_bandwidth" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}错误：请输入有效的数字${NC}"
        return 1
    fi

    # 将M转换为Kbit
    new_bandwidth=$((new_bandwidth * 1024))

    # 更新根类别
    tc class change dev $INTERFACE parent 1: classid 1:1 htb rate ${new_bandwidth}kbit ceil ${new_bandwidth}kbit

    # 获取IP数量
    IP_COUNT=$(tc class show dev $INTERFACE | grep "parent 1:1" | wc -l)
    
    # 计算新的每IP带宽
    NEW_BASE_BANDWIDTH=$((new_bandwidth / IP_COUNT))
    NEW_BURST_BANDWIDTH=$((NEW_BASE_BANDWIDTH * 2))

    # 更新每个子类
    for class in $(tc class show dev $INTERFACE | grep "parent 1:1" | awk '{print $3}'); do
        tc class change dev $INTERFACE parent 1:1 classid $class htb \
            rate $((NEW_BASE_BANDWIDTH))kbit \
            ceil $((NEW_BURST_BANDWIDTH))kbit
    done

    echo -e "${GREEN}带宽限制已更新${NC}"
    show_bandwidth_status
}

# 停止带宽控制
stop_bandwidth_control() {
    INTERFACE=$(ip route | grep default | awk '{print $5}' | head -n1)
    if [ -z "$INTERFACE" ]; then
        echo -e "${RED}错误：无法检测到网络接口${NC}"
        return 1
    fi

    # 停止带宽监控服务
    systemctl stop bandwidth-monitor
    systemctl disable bandwidth-monitor

    # 删除tc规则
    tc qdisc del dev $INTERFACE root 2>/dev/null

    echo -e "${GREEN}带宽控制已停止${NC}"
    return 0
}


# ┌─────────────────────────────────────────────┐
# │ 测试代理连通性                             │
# └─────────────────────────────────────────────┘
test_proxy_connectivity() {
    echo -e "${YELLOW}开始并发测试代理连通性...${NC}"

    if [ ! -f /root/proxy_list.txt ]; then
        echo -e "${RED}/root/proxy_list.txt 文件不存在${NC}"
        return 1
    fi

    # 设置固定并发数
    local max_concurrent=20
    local current_concurrent=0
    declare -a pids=()
    
    # 统计变量
    local total=0
    local success=0
    local failed=0

    
    # 临时文件
    local tmp_result="/tmp/proxy_test_result.$$"
    rm -f "$tmp_result"
    touch "$tmp_result"

    # 测试单个代理
    test_single_proxy() {
        local ip=$1
        local port=$2
        local user=$3
        local pass=$4
        local index=$5

        # 根据IP类型选择测试参数
        if [[ $ip =~ ":" ]]; then
            local test_ip="[$ip]"
            local ip_type="ipv6"
            local test_url="http://www.google.com/generate_204"
        else
            local test_ip="$ip"
            local ip_type="ipv4"
            local test_url="http://www.google.com/generate_204"
        fi

        # 快速测试连通性
        if timeout 3 curl -s -m 2 \
            --proxy socks5h://$user:$pass@$test_ip:$port \
            $test_url -o /dev/null &>/dev/null; then
            echo "$index:$ip:$port:$ip_type:success" >> "$tmp_result"
        else
            echo "$index:$ip:$port:$ip_type:failed" >> "$tmp_result"
        fi
    }

    # 批量处理代理列表
    while IFS=: read -r ip port user pass; do
        if [ -z "$ip" ] || [ -z "$port" ] || [ -z "$user" ] || [ -z "$pass" ]; then
            continue
        fi
        ((total++))
        
        # 控制并发数
        while [ $current_concurrent -ge $max_concurrent ]; do
            for pid in "${pids[@]}"; do
                if ! kill -0 $pid 2>/dev/null; then
                    ((current_concurrent--))
                fi
            done
            [ $current_concurrent -ge $max_concurrent ] && sleep 0.1
        done

        # 启动测试
        test_single_proxy "$ip" "$port" "$user" "$pass" "$total" &
        pids+=($!)
        ((current_concurrent++))
        echo -e "${YELLOW}启动测试 $total: $ip:$port${NC}"
    done < /root/proxy_list.txt

    # 等待所有测试完成
    echo -e "\n${YELLOW}等待所有测试完成...${NC}"
    for pid in "${pids[@]}"; do
        wait $pid 2>/dev/null
    done

    # 处理并显示结果
    echo -e "\n${YELLOW}测试结果：${NC}"
    while IFS=: read -r index ip port type status; do
        if [ "$status" = "success" ]; then
            echo -e "${GREEN}✓ $ip:$port 连接成功${NC}"
            ((success++))
        else
            echo -e "${RED}✗ $ip:$port 连接失败${NC}"
            ((failed++))
        fi
    done < <(sort -n -t: -k1 "$tmp_result")

    # 清理临时文件
    rm -f "$tmp_result"

    # 显示详细统计
    echo -e "\n${YELLOW}测试统计：${NC}"
    echo -e "总代理数量: ${total}"
    echo -e "${GREEN}总成功数: ${success}${NC}"
    echo -e "${RED}总失败数: ${failed}${NC}"
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ 清理函数                                   │
# └─────────────────────────────────────────────┘
clear_proxy_rules() {
    echo "清除所有代理规则..."
    $service_manager stop xray
    $service_manager disable xray
    rm -f /etc/xray/serve.json
    rm -f /etc/systemd/system/xray.service
    iptables -F
    iptables -X
    iptables -t nat -F
    iptables -t mangle -F
    ip6tables -F
    ip6tables -X
    ip6tables -t nat -F
    ip6tables -t mangle -F
    iptables-save
    ip6tables-save
    rm -f /root/proxy_list.txt
    echo "已清除所有代理规则，回到未安装SOCKS5代理的状态。"
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ IPv6管理菜单                               │
# └─────────────────────────────────────────────┘
ipv6_manager_menu() {
    while true; do
        echo -e "\n${YELLOW}IPv6地址管理工具${NC}"
        echo "1. 添加随机IPv6地址"
        echo "2. 删除所有IPv6地址"
        echo "3. 显示当前IPv6地址"
        echo "4. 测试IPv6连通性"
        echo "0. 返回主菜单"

        read -p "请选择操作 [0-4]: " ipv6_option

        case $ipv6_option in
            1)
                INTERFACE=$(get_main_interface)
                if [ $? -ne 0 ]; then
                    echo -e "${RED}获取网络接口失败${NC}"
                    continue
                fi

                # 先显示当前IPv6信息
                echo -e "${YELLOW}当前IPv6配置：${NC}"
                ip -6 addr show dev $INTERFACE

                # 获取IPv6前缀
                PREFIX=$(ip -6 addr show dev $INTERFACE | grep "scope global" | grep -v "temporary" | head -n1 | awk '{print $2}' | cut -d'/' -f1 | sed -E 's/:[^:]+:[^:]+:[^:]+:[^:]+$/::/')

                if [ -z "$PREFIX" ]; then
                    echo -e "${RED}无法获取IPv6前缀${NC}"
                    continue
                fi

                echo -e "${GREEN}使用IPv6前缀: $PREFIX${NC}"

                read -p "请输入要添加的IPv6地址数量: " num_addresses
                if [[ ! "$num_addresses" =~ ^[0-9]+$ ]]; then
                    echo -e "${RED}请输入有效的数字${NC}"
                    continue
                fi

                add_ipv6_addresses "$INTERFACE" "$PREFIX" "$num_addresses"
                ;;
            2)
                INTERFACE=$(get_main_interface)
                if [ $? -eq 0 ]; then
                    delete_all_ipv6 $INTERFACE
                fi
                ;;
            3)
                INTERFACE=$(get_main_interface)
                if [ $? -eq 0 ]; then
                    show_current_ipv6 $INTERFACE
                fi
                ;;
            4)
                test_proxy_connectivity
                ;;
            0)
                return
                ;;
            *)
                echo -e "${RED}无效的选择${NC}"
                ;;
        esac

        echo -e "\n按回车键继续..."
        read
    done
}

# ┌─────────────────────────────────────────────┐
# │ 主菜单模块                                 │
# └─────────────────────────────────────────────┘

show_menu() {
    echo -e "\n${YELLOW}=== 代理服务器管理工具 ===${NC}"
    echo -e "\n${GREEN}【基础配置】${NC}"
    echo "1. 环境配置（安装必要组件）"
    
    echo -e "\n${GREEN}【网络优化】${NC}"
    echo "2. BBR加速管理"
    echo "3. 带宽控制管理"
    
    echo -e "\n${GREEN}【功能配置】${NC}"
    echo "4. IPv6地址管理"
    echo "5. SOCKS5代理设置"
    echo "6. 设置IP进出策略"
    
    echo -e "\n${GREEN}【监控维护】${NC}"
    echo "7. 测试代理连通性"
    echo "8. 显示代理列表"
    echo "9. 清除所有代理规则"
    
    echo -e "\n0. 退出\n"

    read -p "请输入选项 [0-9]: " option
    case $option in
        1) 
            setup_environment 
            ;;
        2)
            bbr_manager_menu
            ;;
        3)
            bandwidth_manager_menu
            ;;
        4) 
            ipv6_manager_menu 
            ;;
        5) 
            set_socks5_credentials 
            ;;
        6) 
            set_ip_strategy 
            ;;
        7) 
            test_proxy_connectivity 
            ;;
        8)
            if [ -f /root/proxy_list.txt ]; then
                echo -e "${YELLOW}当前代理列表：${NC}"
                cat /root/proxy_list.txt
            else
                echo -e "${RED}/root/proxy_list.txt 文件不存在${NC}"
            fi
            ;;
        9) 
            echo -e "${RED}警告：此操作将清除所有代理规则！${NC}"
            read -p "确定要继续吗？(y/n): " confirm
            if [[ "$confirm" == "y" ]]; then
                clear_proxy_rules
            fi
            ;;
        0)
            echo -e "${GREEN}感谢使用，再见！${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}无效选项，请重新选择${NC}"
            ;;
    esac
}

# 带宽控制管理子菜单
bandwidth_manager_menu() {
    while true; do
        echo -e "\n${YELLOW}=== 带宽控制管理 ===${NC}"
        echo "1. 设置带宽限制"
        echo "2. 查看当前带宽状态"
        echo "3. 调整现有限制"
        echo "4. 停止带宽控制"
        echo "0. 返回主菜单"

        read -p "请选择操作 [0-4]: " bw_option
        case $bw_option in
            1) setup_bandwidth_control ;;
            2) show_bandwidth_status ;;
            3) adjust_bandwidth_limits ;;
            4) 
                echo -e "${YELLOW}停止带宽控制...${NC}"
                stop_bandwidth_control
                ;;
            0) return ;;
            *) echo -e "${RED}无效的选择${NC}" ;;
        esac

        echo -e "\n按回车键继续..."
        read
    done
}

# 主程序入口
main() {
    # 检查root权限
    if [ "$EUID" -ne 0 ]; then 
        echo -e "${RED}请使用root权限运行此脚本${NC}"
        exit 1
    fi

    # 初始化
    detect_system
    if [ $? -ne 0 ]; then
        echo -e "${RED}系统检测失败，请检查您的操作系统是否受支持${NC}"
        exit 1
    fi

    # 加载必要的模块和配置
    check_and_install_iptables
    check_ipv6
    load_saved_config

    # 显示使用说明
    show_usage

    # 主循环
    while true; do
        show_menu
        sleep 1
    done
}

# ┌─────────────────────────────────────────────┐
# │ 脚本入口                                   │
# └─────────────────────────────────────────────┘

# 调用主函数
main
