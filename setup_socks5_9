#!/bin/bash

# ┌─────────────────────────────────────────────┐
# │ 颜色定义                                   │
# └─────────────────────────────────────────────┘
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# ┌─────────────────────────────────────────────┐
# │ 使用说明                                   │
# └─────────────────────────────────────────────┘
show_usage() {
    echo -e "${YELLOW}=== 代理服务器配置流程 ===${NC}"
    echo -e "推荐配置顺序："
    echo -e "1. 环境配置 - 安装必要的软件包和服务"
    echo -e "2. BBR加速 - 优化网络性能"
    echo -e "3. IPv6管理 - 配置IPv6地址（可选）"
    echo -e "4. 带宽控制 - 设置流量限制"
    echo -e "5. SOCKS5设置 - 配置代理服务"
    echo -e "6. IP策略 - 设置进出流量规则"
    echo -e "7. 连通性测试 - 验证代理是否正常工作"
    echo -e "${GREEN}提示：首次使用请按照顺序依次配置${NC}"
    echo -e "${RED}注意：清除规则(选项9)会重置所有设置${NC}\n"
}

# ┌─────────────────────────────────────────────┐
# │ 主菜单                                     │
# └─────────────────────────────────────────────┘
show_menu() {
    echo -e "\n${YELLOW}=== 代理服务器管理工具 ===${NC}"
    echo "1. 环境配置（安装必要组件）"
    echo "2. 启用BBR加速"
    echo "3. IPv6地址管理"
    echo "4. 设置带宽控制"
    echo "5. SOCKS5代理设置"
    echo "6. 设置IP进出策略"
    echo "7. 测试代理连通性"
    echo "8. 显示代理列表"
    echo "9. 清除所有代理规则"
    echo "10. 退出"

    read -p "请输入选项 [1-10]: " option
    case $option in
        1) setup_environment ;;
        2) enable_bbr ;;
        3) ipv6_manager_menu ;;
        4) setup_bandwidth_control ;;
        5) set_socks5_credentials ;;
        6) set_ip_strategy ;;
        7) test_proxy_connectivity ;;
        8) 
            if [ -f /root/proxy_list.txt ]; then
                cat /root/proxy_list.txt
            else
                echo -e "${RED}/root/proxy_list.txt 文件不存在。${NC}"
            fi
            ;;
        9) clear_proxy_rules ;;
        10) echo "退出脚本。"; exit ;;
        *) echo -e "${RED}无效选项，请输入1-10之间的数字${NC}" ;;
    esac
}

# ┌─────────────────────────────────────────────┐
# │ IPv6管理菜单                               │
# └─────────────────────────────────────────────┘
ipv6_manager_menu() {
    while true; do
        echo -e "\n${YELLOW}IPv6地址管理工具${NC}"
        echo "1. 添加随机IPv6地址"
        echo "2. 删除所有IPv6地址"
        echo "3. 显示当前IPv6地址"
        echo "4. 测试IPv6连通性"
        echo "0. 返回主菜单"

        read -p "请选择操作 [0-4]: " ipv6_option

        case $ipv6_option in
            1)
                INTERFACE=$(get_main_interface)
                if [ $? -ne 0 ]; then
                    echo -e "${RED}获取网络接口失败${NC}"
                    continue
                fi
                read -p "请输入要添加的IPv6地址数量: " num_addresses
                add_ipv6_addresses "$INTERFACE" "$PREFIX" "$num_addresses"
                ;;
            2)
                INTERFACE=$(get_main_interface)
                if [ $? -eq 0 ]; then
                    delete_all_ipv6 $INTERFACE
                fi
                ;;
            3)
                INTERFACE=$(get_main_interface)
                if [ $? -eq 0 ]; then
                    show_current_ipv6 $INTERFACE
                fi
                ;;
            4)
                test_proxy_connectivity
                ;;
            0)
                return
                ;;
            *)
                echo -e "${RED}无效的选择${NC}"
                ;;
        esac

        echo -e "\n按回车键继续..."
        read
    done
}

# ┌─────────────────────────────────────────────┐
# │ 主程序                                     │
# └─────────────────────────────────────────────┘
main() {
    # 检查root权限
    if [ "$EUID" -ne 0 ]; then 
        echo -e "${RED}请使用root权限运行此脚本${NC}"
        exit 1
    fi

    # 初始化
    detect_system
    if [ $? -ne 0 ]; then
        echo -e "${RED}系统检测失败，请检查您的操作系统是否受支持。${NC}"
        exit 1
    fi

    check_and_install_iptables
    check_ipv6

    # 显示使用说明
    show_usage

    # 主循环
    while true; do
        show_menu
        sleep 1
    done
}

# 运行主程序
main


# ┌─────────────────────────────────────────────┐
# │ 配置管理模块                               │
# └─────────────────────────────────────────────┘
manage_xray_config() {
    local action=$1
    local config_file="/etc/xray/serve.json"
    local service_file="/etc/systemd/system/xray.service"
    
    case "$action" in
        "setup")
            # 创建配置目录
            mkdir -p /etc/xray
            
            # 更新service文件
            cat <<EOF > "$service_file"
[Unit]
Description=The Xray Proxy Server
After=network-online.target

[Service]
ExecStart=/usr/local/bin/xray -config $config_file
ExecStop=/bin/kill -s QUIT \$MAINPID
Restart=always
RestartSec=15s

[Install]
WantedBy=multi-user.target
EOF

            # 重新加载systemd配置
            systemctl daemon-reload
            ;;
            
        "reload")
            # 验证配置
            if ! /usr/local/bin/xray -test -config "$config_file"; then
                echo -e "${RED}配置验证失败${NC}"
                return 1
            }
            
            # 重启服务
            systemctl restart xray
            
            # 检查服务状态
            if ! systemctl is-active --quiet xray; then
                echo -e "${RED}Xray服务启动失败${NC}"
                systemctl status xray
                return 1
            fi
            
            echo -e "${GREEN}Xray服务已重启并加载新配置${NC}"
            ;;
            
        "backup")
            # 备份当前配置
            local backup_dir="/etc/xray/backup"
            local timestamp=$(date +%Y%m%d_%H%M%S)
            mkdir -p "$backup_dir"
            
            if [ -f "$config_file" ]; then
                cp "$config_file" "$backup_dir/serve_${timestamp}.json"
                echo -e "${GREEN}配置已备份到: $backup_dir/serve_${timestamp}.json${NC}"
            fi
            ;;
            
        *)
            echo -e "${RED}无效的配置管理操作${NC}"
            return 1
            ;;
    esac
    
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ IP策略配置模块                             │
# └─────────────────────────────────────────────┘
generate_config_strategy_1() {
    local port=$1
    
    cat <<EOF > /etc/xray/serve_strategy1.json
{
    "inbounds": [
EOF
    
    # 首先写入所有入站配置
    first_inbound=true
    for ipv4 in "${ipv4_addrs[@]}"; do
        if [ "$first_inbound" = true ]; then
            first_inbound=false
        else
            echo "," >> /etc/xray/serve_strategy1.json
        fi
        
        cat <<EOF >> /etc/xray/serve_strategy1.json
        {
            "listen": "$ipv4",
            "port": $port,
            "protocol": "socks",
            "tag": "in_${ipv4}_${port}",
            "settings": {
                "auth": "password",
                "udp": true,
                "ip": "$ipv4",
                "accounts": [{
                    "user": "$socks_user",
                    "pass": "$socks_pass"
                }]
            }
        }
EOF
    done

    # 写入出站配置
    cat <<EOF >> /etc/xray/serve_strategy1.json
    ],
    "outbounds": [
EOF

    first_outbound=true
    for ipv4 in "${ipv4_addrs[@]}"; do
        if [ "$first_outbound" = true ]; then
            first_outbound=false
        else
            echo "," >> /etc/xray/serve_strategy1.json
        fi
        
        cat <<EOF >> /etc/xray/serve_strategy1.json
        {
            "protocol": "freedom",
            "tag": "out_${ipv4}_${port}",
            "settings": { "domainStrategy": "UseIPv4" },
            "streamSettings": { "sockopt": { "mark": 255 } },
            "sendThrough": "$ipv4"
        }
EOF
    done

    # 写入路由规则
    cat <<EOF >> /etc/xray/serve_strategy1.json
    ],
    "routing": {
        "rules": [
EOF

    first_rule=true
    for ipv4 in "${ipv4_addrs[@]}"; do
        if [ "$first_rule" = true ]; then
            first_rule=false
        else
            echo "," >> /etc/xray/serve_strategy1.json
        fi
        
        cat <<EOF >> /etc/xray/serve_strategy1.json
            {
                "type": "field",
                "inboundTag": ["in_${ipv4}_${port}"],
                "outboundTag": "out_${ipv4}_${port}"
            }
EOF
    done

    # 完成配置文件
    cat <<EOF >> /etc/xray/serve_strategy1.json
        ]
    }
}
EOF
}

generate_config_strategy_2() {
    local port=$1
    
    # 首先生成所有 outbound tags
    ipv4_shuffled=($(printf "%s\n" "${ipv4_addrs[@]}" | shuf))
    outbound_tags=()
    for ipv4 in "${ipv4_shuffled[@]}"; do
        outbound_tags+=("outbound_$(echo $ipv4 | tr '.:' '_')_${port}")
    done

    # 检查是否有可用的 IPv4 地址
    if [ ${#outbound_tags[@]} -eq 0 ]; then
        echo -e "${RED}错误：没有可用的IPv4地址${NC}"
        return 1
    fi

    cat <<EOF > /etc/xray/serve_strategy2.json
{
    "inbounds": [{
        "listen": "${ipv4_addrs[0]}",
        "port": $port,
        "protocol": "socks",
        "tag": "inbound-ipv4-${port}",
        "settings": {
            "auth": "password",
            "udp": true,
            "accounts": [{"user": "$socks_user", "pass": "$socks_pass"}]
        }
    }],
    "outbounds": [
EOF

    # 写入出站配置
    first=true
    for i in "${!ipv4_shuffled[@]}"; do
        ipv4=${ipv4_shuffled[$i]}
        tag=${outbound_tags[$i]}
        
        if [ "$first" = true ]; then
            first=false
        else
            echo "        ," >> /etc/xray/serve_strategy2.json
        fi
        
        cat <<EOF >> /etc/xray/serve_strategy2.json
        {
            "protocol": "freedom",
            "tag": "$tag",
            "settings": {"domainStrategy": "UseIPv4"},
            "streamSettings": {"sockopt": {"mark": 255}},
            "sendThrough": "$ipv4"
        }
EOF
    done

    # 完成配置文件
    cat <<EOF >> /etc/xray/serve_strategy2.json
    ],
    "routing": {
        "balancers": [{
            "tag": "ipv4_balancer_${port}",
            "selector": [$(printf '"%s",' "${outbound_tags[@]}" | sed 's/,$//')],
            "strategy": {
                "type": "random"
            }
        }],
        "rules": [{
            "type": "field",
            "inboundTag": ["inbound-ipv4-${port}"],
            "balancerTag": "ipv4_balancer_${port}"
        }]
    }
}
EOF
}

generate_config_strategy_3() {
    local port=$1
    
    # 首先生成所有 outbound tags
    ipv6_shuffled=($(printf "%s\n" "${ipv6_addrs[@]}" | shuf))
    outbound_tags=()
    for ipv6 in "${ipv6_shuffled[@]}"; do
        outbound_tags+=("outbound_$(echo $ipv6 | tr ':.' '_')_${port}")
    done

    # 检查是否有可用的 IPv6 地址
    if [ ${#outbound_tags[@]} -eq 0 ]; then
        echo -e "${RED}错误：没有可用的IPv6地址${NC}"
        return 1
    fi

    cat <<EOF > /etc/xray/serve_strategy3.json
{
    "inbounds": [{
        "listen": "${ipv4_addrs[0]}",
        "port": $port,
        "protocol": "socks",
        "tag": "inbound-ipv4-${port}",
        "settings": {
            "auth": "password",
            "udp": true,
            "accounts": [{"user": "$socks_user", "pass": "$socks_pass"}]
        }
    }],
    "outbounds": [
EOF

    # 写入出站配置
    first=true
    for i in "${!ipv6_shuffled[@]}"; do
        ipv6=${ipv6_shuffled[$i]}
        tag=${outbound_tags[$i]}
        
        if [ "$first" = true ]; then
            first=false
        else
            echo "        ," >> /etc/xray/serve_strategy3.json
        fi
        
        cat <<EOF >> /etc/xray/serve_strategy3.json
        {
            "protocol": "freedom",
            "tag": "$tag",
            "settings": {"domainStrategy": "UseIPv6"},
            "streamSettings": {"sockopt": {"mark": 255}},
            "sendThrough": "$ipv6"
        }
EOF
    done

    # 完成配置文件
    cat <<EOF >> /etc/xray/serve_strategy3.json
    ],
    "routing": {
        "balancers": [{
            "tag": "ipv6_balancer_${port}",
            "selector": [$(printf '"%s",' "${outbound_tags[@]}" | sed 's/,$//')],
            "strategy": {
                "type": "random"
            }
        }],
        "rules": [{
            "type": "field",
            "inboundTag": ["inbound-ipv4-${port}"],
            "balancerTag": "ipv6_balancer_${port}"
        }]
    }
}
EOF
}

generate_config_strategy_4() {
    local port=$1
    local port_count=$2
    
    cat <<EOF > /etc/xray/serve_strategy4.json
{
    "inbounds": [
EOF

    # 配置所有入站
    first_inbound=true
    for ipv4 in "${ipv4_addrs[@]}"; do
        for ((i=0; i<port_count; i++)); do
            current_port=$((port + i))
            
            if [ "$first_inbound" = true ]; then
                first_inbound=false
            else
                echo "," >> /etc/xray/serve_strategy4.json
            fi
            
            cat <<EOF >> /etc/xray/serve_strategy4.json
        {
            "listen": "$ipv4",
            "port": $current_port,
            "protocol": "socks",
            "tag": "in_${ipv4}_${current_port}",
            "settings": {
                "auth": "password",
                "udp": true,
                "ip": "$ipv4",
                "accounts": [{
                    "user": "$socks_user",
                    "pass": "$socks_pass"
                }]
            }
        }
EOF
        done
    done

    # 添加出站配置
    cat <<EOF >> /etc/xray/serve_strategy4.json
    ],
    "outbounds": [
EOF

    # 配置所有出站
    first_outbound=true
    for ((i=0; i<port_count; i++)); do
        current_port=$((port + i))
        current_ipv6="${ipv6_addrs[i % ${#ipv6_addrs[@]}]}"
        
        if [ "$first_outbound" = true ]; then
            first_outbound=false
        else
            echo "," >> /etc/xray/serve_strategy4.json
        fi
        
        cat <<EOF >> /etc/xray/serve_strategy4.json
        {
            "protocol": "freedom",
            "tag": "out_${current_port}",
            "settings": {"domainStrategy": "UseIPv6"},
            "streamSettings": {"sockopt": {"mark": 255}},
            "sendThrough": "$current_ipv6"
        }
EOF
    done

    # 添加路由规则
    cat <<EOF >> /etc/xray/serve_strategy4.json
    ],
    "routing": {
        "rules": [
EOF

    # 配置所有路由规则
    first_rule=true
    for ((i=0; i<port_count; i++)); do
        current_port=$((port + i))
        for ipv4 in "${ipv4_addrs[@]}"; do
            if [ "$first_rule" = true ]; then
                first_rule=false
            else
                echo "," >> /etc/xray/serve_strategy4.json
            fi
            
            cat <<EOF >> /etc/xray/serve_strategy4.json
            {
                "type": "field",
                "inboundTag": ["in_${ipv4}_${current_port}"],
                "outboundTag": "out_${current_port}"
            }
EOF
        done
    done

    # 完成配置文件
    cat <<EOF >> /etc/xray/serve_strategy4.json
        ]
    }
}
EOF
}

# 合并配置函数
merge_configs() {
    local strategies=$1
    local port1=$2
    local port2=$3
    
    echo -e "${YELLOW}合并配置文件...${NC}"
    
    # 备份当前配置
    manage_xray_config backup
    
    # 检查是否安装了jq
    if ! command -v jq &> /dev/null; then
        echo -e "${YELLOW}正在安装jq...${NC}"
        if [ "$ID" == "centos" ]; then
            yum install -y jq
        else
            apt-get update && apt-get install -y jq
        fi
    fi
    
    case $strategies in
        "1,2")
            # 合并策略1和2的配置
            jq -s '
                .[0].inbounds + .[1].inbounds as $inbounds |
                .[0].outbounds + .[1].outbounds as $outbounds |
                .[0].routing.rules + .[1].routing.rules as $rules |
                {
                    inbounds: $inbounds,
                    outbounds: $outbounds,
                    routing: {
                        rules: $rules,
                        balancers: (.[1].routing.balancers // [])
                    }
                }
            ' /etc/xray/serve_strategy1.json /etc/xray/serve_strategy2.json > /etc/xray/serve.json
            ;;
            
        "3,4")
            # 合并策略3和4的配置
            jq -s '
                .[0].inbounds + .[1].inbounds as $inbounds |
                .[0].outbounds + .[1].outbounds as $outbounds |
                .[0].routing.rules + .[1].routing.rules as $rules |
                {
                    inbounds: $inbounds,
                    outbounds: $outbounds,
                    routing: {
                        rules: $rules,
                        balancers: (.[0].routing.balancers // [])
                    }
                }
            ' /etc/xray/serve_strategy3.json /etc/xray/serve_strategy4.json > /etc/xray/serve.json
            ;;
    esac
    
    # 设置配置文件权限
    chmod 644 /etc/xray/serve.json
    
    # 确保Xray服务配置正确
    manage_xray_config setup
    
    # 重新加载配置
    manage_xray_config reload
    
    # 生成新的代理列表
    generate_combined_proxy_list $strategies $port1 $port2
    
    echo -e "${GREEN}配置合并完成并已重启服务${NC}"
    return 0
}

# 生成组合代理列表
generate_combined_proxy_list() {
    local strategies=$1
    local port1=$2
    local port2=$3
    local output_file="/root/proxy_list.txt"
    
    echo -e "${YELLOW}生成组合代理列表...${NC}"
    
    # 清空现有代理列表
    > "$output_file"
    
    case $strategies in
        "1,2")
            # 策略1的代理列表（同IP进出）
            for ipv4 in "${ipv4_addrs[@]}"; do
                echo "$ipv4:$port1:$socks_user:$socks_pass" >> "$output_file"
            done
            
            # 策略2的代理列表（随机IPv4出）
            echo "${ipv4_addrs[0]}:$port2:$socks_user:$socks_pass" >> "$output_file"
            ;;
            
        "3,4")
            # 策略3的代理列表（随机IPv6出）
            echo "${ipv4_addrs[0]}:$port1:$socks_user:$socks_pass" >> "$output_file"
            
            # 策略4的代理列表（固定IPv6出）
            for ((i=0; i<port_count4; i++)); do
                current_port=$((port2 + i))
                for ipv4 in "${ipv4_addrs[@]}"; do
                    echo "$ipv4:$current_port:$socks_user:$socks_pass" >> "$output_file"
                done
            done
            ;;
    esac
    
    echo -e "${GREEN}代理列表已生成：${output_file}${NC}"
}

# 设置IP策略的主控制函数
set_ip_strategy() {
    echo -e "${YELLOW}配置IP进出策略...${NC}"

    # 获取IPv4和IPv6地址列表 
    ipv4_addrs=($(ip -4 addr show | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | grep -v '^127\.'))
    ipv6_addrs=($(ip -6 addr show | grep "inet6" | grep -v "fe80" | grep -v "::1" | awk '{print $2}' | cut -d'/' -f1))

    echo -e "${GREEN}当前IPv4地址: ${ipv4_addrs[@]}${NC}"
    echo -e "${GREEN}当前IPv6地址: ${ipv6_addrs[@]}${NC}"

    echo -e "\n${YELLOW}请选择IP策略组：${NC}"
    echo "1. IPv4策略组（同IP进出 + 随机IPv4出）"
    echo "2. IPv6策略组（随机IPv6出 + 固定IPv6出）"
    read -p "请输入选项 [1-2]: " strategy_group

    case $strategy_group in
        1)  # IPv4策略组
            echo -e "\n${YELLOW}IPv4策略组配置：${NC}"
            read -p "请输入策略1(同IP进出)的端口: " port_strategy1
            read -p "请输入策略2(随机IPv4出)的端口: " port_strategy2
            
            # 生成策略1的配置
            generate_config_strategy_1 $port_strategy1
            
            # 生成策略2的配置
            generate_config_strategy_2 $port_strategy2
            
            # 合并配置文件
            merge_configs "1,2" $port_strategy1 $port_strategy2
            ;;
            
        2)  # IPv6策略组
            echo -e "\n${YELLOW}IPv6策略组配置：${NC}"
            read -p "请输入策略3(随机IPv6出)的端口: " port_strategy3
            read -p "请输入策略4(固定IPv6出)的起始端口: " port_strategy4
            read -p "请输入策略4的端口数量: " port_count4
            
            # 生成策略3的配置
            generate_config_strategy_3 $port_strategy3
            
            # 生成策略4的配置
            generate_config_strategy_4 $port_strategy4 $port_count4
            
            # 合并配置文件
            merge_configs "3,4" $port_strategy3 $port_strategy4
            ;;
            
        *)
            echo -e "${RED}无效的策略组选择${NC}"
            return 1
            ;;
    esac
}

# 修改 set_socks5_credentials 函数
set_socks5_credentials() {
    # 设置默认值
    local default_user="pnqu4x"
    local default_pass="zqgzNK3LRS"

    # 提示用户输入，使用默认值作为提示
    read -p "请输入用户名 (默认: $default_user): " socks_user
    socks_user=${socks_user:-$default_user}  # 如果用户没有输入，使用默认值

    read -p "请输入密码 (默认: $default_pass): " socks_pass
    socks_pass=${socks_pass:-$default_pass}  # 如果用户没有输入，使用默认值

    # 调用 set_ip_strategy 设置策略
    set_ip_strategy

    echo -e "${GREEN}SOCKS5用户名和密码设置完成。${NC}"
    return 0
}

# 修改 clear_proxy_rules 函数
clear_proxy_rules() {
    echo "清除所有代理规则..."
    $service_manager stop xray
    $service_manager disable xray
    
    # 清理所有配置文件
    rm -f /etc/xray/serve*.json
    rm -f /etc/systemd/system/xray.service
    
    iptables -F
    iptables -X
    iptables -t nat -F
    iptables -t mangle -F
    ip6tables -F
    ip6tables -X
    ip6tables -t nat -F
    ip6tables -t mangle -F
    iptables-save
    ip6tables-save
    
    rm -f /root/proxy_list.txt
    
    echo "已清除所有代理规则和配置文件。"
    return 0
}

