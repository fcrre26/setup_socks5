#!/bin/bash

# ┌─────────────────────────────────────────────┐
# │ 颜色定义                                   │
# └─────────────────────────────────────────────┘
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # 无颜色

# ┌─────────────────────────────────────────────┐
# │ 使用说明                                   │
# └─────────────────────────────────────────────┘
show_usage() {
    echo -e "${YELLOW}=== 代理服务器配置流程 ===${NC}"
    echo -e "推荐配置顺序："
    echo -e "1. 环境配置 - 安装必要的软件包和服务"
    echo -e "2. BBR加速 - 优化网络性能"
    echo -e "3. IPv6管理 - 配置IPv6地址（可选）"
    echo -e "4. 带宽控制 - 设置流量限制"
    echo -e "5. SOCKS5设置 - 配置代理服务"
    echo -e "6. IP策略 - 设置进出流量规则"
    echo -e "7. 连通性测试 - 验证代理是否正常工作"
    echo -e "${GREEN}提示：首次使用请按照顺序依次配置${NC}"
    echo -e "${RED}注意：清除规则(选项9)会重置所有设置${NC}\n"
}

# ┌─────────────────────────────────────────────┐
# │ 系统检测模块                               │
# └─────────────────────────────────────────────┘
detect_system() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        case "$ID" in
            "ubuntu"|"debian")
                service_manager="systemctl"
                ;;
            "centos")
                if (( $(echo "$VERSION_ID >= 7" | bc -l) )); then
                    service_manager="systemctl"
                else
                    service_manager="service"
                fi
                ;;
            *)
                echo -e "${RED}不支持的系统${NC}"
                return 1
                ;;
        esac
    else
        echo -e "${RED}无法识别的系统${NC}"
        return 1
    fi
}

# ┌─────────────────────────────────────────────┐
# │ 软件安装模块                               │
# └─────────────────────────────────────────────┘
check_and_install_unzip() {
    if ! command -v unzip &> /dev/null; then
        echo "未安装unzip，正在安装..."
        if [ "$ID" == "centos" ]; then
            yum install unzip -y
        else
            apt-get update && apt-get install unzip -y
        fi
    fi
    return 0
}

check_and_install_iptables() {
    if ! command -v iptables &> /dev/null; then
        echo "未安装iptables，正在安装..."
        if [ "$ID" == "centos" ]; then
            yum install iptables-services -y
            systemctl enable iptables
        else
            apt-get update && apt-get install iptables-persistent -y
        fi
    fi
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ IPv6检查模块                               │
# └─────────────────────────────────────────────┘
check_ipv6() {
    if ! sysctl -a 2>/dev/null | grep -q "net.ipv6.conf.all.disable_ipv6 = 0"; then
        echo "启用IPv6支持..."
        sysctl -w net.ipv6.conf.all.disable_ipv6=0
        sysctl -w net.ipv6.conf.default.disable_ipv6=0
        echo "net.ipv6.conf.all.disable_ipv6 = 0" >> /etc/sysctl.conf
        echo "net.ipv6.conf.default.disable_ipv6 = 0" >> /etc/sysctl.conf
        sysctl -p
    fi
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ Xray安装模块                               │
# └─────────────────────────────────────────────┘
install_xray() {
    echo "正在从GitHub下载Xray..."
    check_and_install_unzip
    wget --no-check-certificate -O /tmp/xray.zip "https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip"
    unzip /tmp/xray.zip -d /usr/local/bin
    rm -f /tmp/xray.zip
    chmod +x /usr/local/bin/xray
    echo "Xray已下载并设置为可执行。"
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ 环境配置模块                               │
# └─────────────────────────────────────────────┘
setup_environment() {
    echo "设置防火墙规则..."
    iptables -P INPUT ACCEPT
    iptables -P FORWARD ACCEPT
    iptables -P OUTPUT ACCEPT
    iptables -t nat -F
    iptables -t mangle -F
    iptables -F
    iptables -X
    iptables-save

    install_xray
    echo "创建Xray服务文件..."
    mkdir -p /etc/xray
    cat <<EOF > /etc/systemd/system/xray.service
[Unit]
Description=The Xray Proxy Server
After=network-online.target

[Service]
ExecStart=/usr/local/bin/xray -config /etc/xray/serve_combined.json
ExecStop=/bin/kill -s QUIT \$MAINPID
Restart=always
RestartSec=15s

[Install]
WantedBy=multi-user.target
EOF

    echo "启动Xray服务..."
    $service_manager daemon-reload
    $service_manager enable xray
    $service_manager start xray
    echo "环境配置完成。"
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ 带宽控制模块                               │
# └─────────────────────────────────────────────┘
setup_bandwidth_control() {
    echo -e "${YELLOW}设置带宽控制...${NC}"
    read -p "请输入总带宽（例如 100M）: " total_bandwidth
    read -p "请输入活跃IP数量: " active_ip_count

    if [[ ! "$total_bandwidth" =~ ^[0-9]+M$ ]]; then
        echo -e "${RED}请输入有效的带宽格式，如 100M${NC}"
        return 1
    fi

    if ! [[ "$active_ip_count" =~ ^[0-9]+$ ]] || [ "$active_ip_count" -le 0 ]; then
        echo -e "${RED}请输入有效的活跃IP数量（正整数）${NC}"
        return 1
    fi

    local rate=$(echo "${total_bandwidth%M} / $active_ip_count" | bc)Mbit

    echo "设置带宽控制..."
    for interface in $(ip -o link show | awk -F': ' '{print $2}'); do
        tc qdisc del dev $interface root 2>/dev/null
        tc qdisc add dev $interface root handle 1: htb default 30
        tc class add dev $interface parent 1: classid 1:1 htb rate $total_bandwidth

        tc class add dev $interface parent 1:1 classid 1:10 htb rate ${rate} ceil ${rate}
        tc filter add dev $interface protocol ip parent 1:0 prio 1 u32 match ip dst 0.0.0.0/0 flowid 1:10
    done

    echo "带宽控制设置完成。"
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ SOCKS5设置模块                             │
# └─────────────────────────────────────────────┘
set_socks5_credentials() {
    echo -e "${YELLOW}配置SOCKS5代理凭证...${NC}"
    read -p "请输入SOCKS5用户名: " socks_user
    read -sp "请输入SOCKS5密码: " socks_pass
    echo

    echo "保存凭证..."
    echo "$socks_user:$socks_pass" > /etc/xray/socks_credentials
    chmod 600 /etc/xray/socks_credentials
    echo "SOCKS5代理凭证已保存。"

    echo "重新启动Xray服务..."
    $service_manager restart xray
    echo "SOCKS5代理设置完成。"
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ 设置IP进出策略模块                         │
# └─────────────────────────────────────────────┘
set_ip_strategy() {
    echo -e "${YELLOW}配置IP进出策略...${NC}"
    
    # 提示用户选择策略类型
    echo -e "${YELLOW}请选择IP进出策略类型:${NC}"
    echo "1. 同IP进出"
    echo "2. IPv4进随机IPv4出"
    echo "3. IPv4进随机IPv6出"
    echo "4. IPv4进固定IPv6出"
    
    read -p "请输入策略编号 [1-4]: " strategy
    
    case $strategy in
        1|2|3|4)
            echo -e "${GREEN}您选择的策略是: 策略 $strategy${NC}"
            ;;
        *)
            echo -e "${RED}无效的策略选择${NC}"
            return 1
            ;;
    esac

    # 获取必要的配置信息
    read -p "请输入SOCKS5起始端口: " socks_port
    if ! [[ "$socks_port" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}请输入有效的端口号（数字）${NC}"
        return 1
    fi
    read -p "请输入SOCKS5用户名: " socks_user
    read -sp "请输入SOCKS5密码: " socks_pass
    echo

    # 获取IPv4和IPv6地址列表
    ipv4_addrs=($(ip -4 addr show | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | grep -v '^127\.'))
    ipv6_addrs=($(ip -6 addr show | grep "inet6" | grep -v "fe80" | grep -v "::1" | awk '{print $2}' | cut -d'/' -f1))

    echo -e "${GREEN}当前IPv4地址: ${ipv4_addrs[@]}${NC}"
    echo -e "${GREEN}当前IPv6地址: ${ipv6_addrs[@]}${NC}"

    # 如果选择策略4，需要足够的IPv6地址
    if [ "$strategy" -eq 4 ]; then
        local required_ipv6=5
        if [ ${#ipv6_addrs[@]} -lt $required_ipv6 ]; then
            echo -e "${RED}错误: 策略4需要至少 $required_ipv6 个IPv6地址，当前有 ${#ipv6_addrs[@]} 个。${NC}"
            return 1
        fi
    fi

    # 如果策略4，分配固定的IPv6地址给端口
    if [ "$strategy" -eq 4 ]; then
        echo -e "${YELLOW}为策略4分配IPv6地址...${NC}"
        declare -gA port_ipv6_map  # 声明为全局变量
        for ((i=0; i<5; i++)); do  # 假设策略4最多分配5个端口
            current_port=$((socks_port + i))
            ipv6=${ipv6_addrs[$i]}
            port_ipv6_map[$current_port]=$ipv6
            echo -e "${GREEN}端口 $current_port -> IPv6: $ipv6${NC}"
        done
    fi

    # 确认配置
    read -p "确认使用以上配置？[y/N] " confirm
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}已取消配置${NC}"
        return 1
    fi

    # 调用IP策略配置函数
    configure_ip_strategy "$strategy"
}

# ┌─────────────────────────────────────────────┐
# │ 配置IP进出策略模块                         │
# └─────────────────────────────────────────────┘
configure_ip_strategy() {
    local strategy=$1

    echo "开始配置IP进出策略... 策略 $strategy"

    case $strategy in
        1)
            generate_config_strategy_1
            ;;
        2)
            generate_config_strategy_2
            ;;
        3)
            generate_config_strategy_3
            ;;
        4)
            generate_config_strategy_4
            ;;
        *)
            echo -e "${RED}未知的策略选择${NC}"
            return 1
            ;;
    esac

    # 合并策略配置文件
    if [ "$strategy" -eq 1 ] || [ "$strategy" -eq 2 ] || [ "$strategy" -eq 3 ] || [ "$strategy" -eq 4 ]; then
        jq -s '.[0] * .[1] * .[2] * .[3]' \
            /etc/xray/serve_strategy1.json \
            /etc/xray/serve_strategy2.json \
            /etc/xray/serve_strategy3.json \
            /etc/xray/serve_strategy4.json > /etc/xray/serve_combined.json
    fi

    # 验证配置
    echo -e "${YELLOW}验证配置文件...${NC}"
    if ! /usr/local/bin/xray -test -config /etc/xray/serve_combined.json; then
        echo -e "${RED}配置验证失败${NC}"
        return 1
    fi

    # 重启 Xray 服务
    systemctl restart xray
    sleep 2

    if ! systemctl is-active --quiet xray; then
        echo -e "${RED}Xray 服务启动失败${NC}"
        systemctl status xray
        return 1
    fi

    echo -e "${GREEN}IP策略设置完成并成功启动服务${NC}"
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ 生成策略1配置文件                           │
# └─────────────────────────────────────────────┘
generate_config_strategy_1() {
    cat <<EOF > /etc/xray/serve_strategy1.json
{
    "inbounds": [
EOF

    # 配置入站
    first_inbound=true
    for ipv4 in "${ipv4_addrs[@]}"; do
        if [ "$first_inbound" = true ]; then
            first_inbound=false
        else
            echo "," >> /etc/xray/serve_strategy1.json
        fi

        cat <<EOF >> /etc/xray/serve_strategy1.json
        {
            "listen": "$ipv4",
            "port": $socks_port,
            "protocol": "socks",
            "tag": "in_$ipv4",
            "settings": {
                "auth": "password",
                "udp": true,
                "accounts": [{
                    "user": "$socks_user",
                    "pass": "$socks_pass"
                }]
            }
        }
EOF
    done

    # 添加出站
    cat <<EOF >> /etc/xray/serve_strategy1.json
    ],
    "outbounds": [
EOF

    first_outbound=true
    for ipv4 in "${ipv4_addrs[@]}"; do
        if [ "$first_outbound" = true ]; then
            first_outbound=false
        else
            echo "," >> /etc/xray/serve_strategy1.json
        fi

        cat <<EOF >> /etc/xray/serve_strategy1.json
        {
            "protocol": "freedom",
            "tag": "out_$ipv4",
            "settings": { "domainStrategy": "UseIPv4" },
            "streamSettings": { "sockopt": { "mark": 255 } },
            "sendThrough": "$ipv4"
        }
EOF
    done

    # 添加路由规则
    cat <<EOF >> /etc/xray/serve_strategy1.json
    ],
    "routing": {
        "rules": [
EOF

    first_rule=true
    for ipv4 in "${ipv4_addrs[@]}"; do
        if [ "$first_rule" = true ]; then
            first_rule=false
        else
            echo "," >> /etc/xray/serve_strategy1.json
        fi

        cat <<EOF >> /etc/xray/serve_strategy1.json
            {
                "type": "field",
                "inboundTag": ["in_$ipv4"],
                "outboundTag": "out_$ipv4"
            }
EOF
    done

    # 完成配置文件
    cat <<EOF >> /etc/xray/serve_strategy1.json
        ]
    }
}
EOF
}

# ┌─────────────────────────────────────────────┐
# │ 生成策略2配置文件                           │
# └─────────────────────────────────────────────┘
generate_config_strategy_2() {
    cat <<EOF > /etc/xray/serve_strategy2.json
{
    "inbounds": [
        {
            "listen": "${ipv4_addrs[0]}",
            "port": $socks_port,
            "protocol": "socks",
            "tag": "inbound-ipv4",
            "settings": {
                "auth": "password",
                "udp": true,
                "accounts": [{"user": "$socks_user", "pass": "$socks_pass"}]
            }
        }
    ],
    "outbounds": [
EOF

    first_outbound=true
    for ((i=1; i<${#ipv4_addrs[@]}; i++)); do
        ipv4=${ipv4_addrs[$i]}
        tag="outbound_${i}"

        if [ "$first_outbound" = true ]; then
            first_outbound=false
        else
            echo "," >> /etc/xray/serve_strategy2.json
        fi

        cat <<EOF >> /etc/xray/serve_strategy2.json
        {
            "protocol": "freedom",
            "tag": "$tag",
            "settings": {"domainStrategy": "UseIPv4"},
            "streamSettings": {"sockopt": {"mark": 255}},
            "sendThrough": "$ipv4"
        }
EOF
    done

    # 添加路由规则
    cat <<EOF >> /etc/xray/serve_strategy2.json
    ],
    "routing": {
        "balancers": [{
            "tag": "ipv4_balancer",
            "selector": [$(for ((i=1; i<${#ipv4_addrs[@]}; i++)); do echo -n "\"outbound_$i\", "; done | sed 's/, $//')],
            "strategy": {
                "type": "random"
            }
        }],
        "rules": [{
            "type": "field",
            "inboundTag": ["inbound-ipv4"],
            "balancerTag": "ipv4_balancer"
        }]
    }
}
EOF
}

# ┌─────────────────────────────────────────────┐
# │ 生成策略3配置文件                           │
# └─────────────────────────────────────────────┘
generate_config_strategy_3() {
    cat <<EOF > /etc/xray/serve_strategy3.json
{
    "inbounds": [
        {
            "listen": "${ipv4_addrs[0]}",
            "port": $socks_port,
            "protocol": "socks",
            "tag": "inbound-ipv4",
            "settings": {
                "auth": "password",
                "udp": true,
                "accounts": [{"user": "$socks_user", "pass": "$socks_pass"}]
            }
        }
    ],
    "outbounds": [
EOF

    first_outbound=true
    for ipv6 in "${ipv6_addrs[@]}"; do
        tag="outbound_${ipv6//:/_}"

        if [ "$first_outbound" = true ]; then
            first_outbound=false
        else
            echo "," >> /etc/xray/serve_strategy3.json
        fi

        cat <<EOF >> /etc/xray/serve_strategy3.json
        {
            "protocol": "freedom",
            "tag": "$tag",
            "settings": {"domainStrategy": "UseIPv6"},
            "streamSettings": {"sockopt": {"mark": 255}},
            "sendThrough": "$ipv6"
        }
EOF
    done

    # 添加路由规则
    cat <<EOF >> /etc/xray/serve_strategy3.json
    ],
    "routing": {
        "balancers": [{
            "tag": "ipv6_balancer",
            "selector": [$(for ipv6 in "${ipv6_addrs[@]}"; do echo -n "\"outbound_${ipv6//:/_}\", "; done | sed 's/, $//')],
            "strategy": {
                "type": "random"
            }
        }],
        "rules": [{
            "type": "field",
            "inboundTag": ["inbound-ipv4"],
            "balancerTag": "ipv6_balancer"
        }]
    }
}
EOF
}

# ┌─────────────────────────────────────────────┐
# │ 生成策略4配置文件                           │
# └─────────────────────────────────────────────┘
generate_config_strategy_4() {
    cat <<EOF > /etc/xray/serve_strategy4.json
{
    "inbounds": [
EOF

    # 配置入站
    first_inbound=true
    for ipv4 in "${ipv4_addrs[@]}"; do
        for port in "${!port_ipv6_map[@]}"; do
            if [ "$first_inbound" = true ]; then
                first_inbound=false
            else
                echo "," >> /etc/xray/serve_strategy4.json
            fi

            ipv6="${port_ipv6_map[$port]}"

            cat <<EOF >> /etc/xray/serve_strategy4.json
        {
            "listen": "$ipv4",
            "port": $port,
            "protocol": "socks",
            "tag": "in_${port}_${ipv4}",
            "settings": {
                "auth": "password",
                "udp": true,
                "accounts": [{
                    "user": "$socks_user",
                    "pass": "$socks_pass"
                }]
            }
        }
EOF
        done
    done

    # 添加出站
    cat <<EOF >> /etc/xray/serve_strategy4.json
    ],
    "outbounds": [
EOF

    first_outbound=true
    for port in "${!port_ipv6_map[@]}"; do
        ipv6="${port_ipv6_map[$port]}"
        tag="out_$port"

        if [ "$first_outbound" = true ]; then
            first_outbound=false
        else
            echo "," >> /etc/xray/serve_strategy4.json
        fi

        cat <<EOF >> /etc/xray/serve_strategy4.json
        {
            "protocol": "freedom",
            "tag": "$tag",
            "settings": { "domainStrategy": "UseIPv6" },
            "streamSettings": { "sockopt": { "mark": 255 } },
            "sendThrough": "$ipv6"
        }
EOF
    done

    # 添加路由规则
    cat <<EOF >> /etc/xray/serve_strategy4.json
    ],
    "routing": {
        "rules": [
EOF

    first_rule=true
    for ipv4 in "${ipv4_addrs[@]}"; do
        for port in "${!port_ipv6_map[@]}"; do
            if [ "$first_rule" = true ]; then
                first_rule=false
            else
                echo "," >> /etc/xray/serve_strategy4.json
            fi

            cat <<EOF >> /etc/xray/serve_strategy4.json
            {
                "type": "field",
                "inboundTag": ["in_${port}_${ipv4}"],
                "outboundTag": "out_$port"
            }
EOF
        done
    done

    # 完成配置文件
    cat <<EOF >> /etc/xray/serve_strategy4.json
        ]
    }
}
EOF
}

# ┌─────────────────────────────────────────────┐
# │ 测试代理连通性                             │
# └─────────────────────────────────────────────┘
test_proxy_connectivity() {
    echo -e "${YELLOW}开始并发测试代理连通性...${NC}"

    if [ ! -f /etc/xray/socks_credentials ]; then
        echo -e "${RED}SOCKS5凭证文件不存在，请先配置SOCKS5设置（选项5）${NC}"
        return 1
    fi

    # 读取凭证
    IFS=':' read -r socks_user socks_pass < /etc/xray/socks_credentials

    if [ ! -f /root/proxy_list.txt ]; then
        echo -e "${RED}/root/proxy_list.txt 文件不存在${NC}"
        return 1
    fi

    # 设置固定并发数
    local max_concurrent=20
    local current_concurrent=0
    declare -a pids=()

    # 统计变量
    local total=0
    local success=0
    local failed=0

    # 临时文件
    local tmp_result="/tmp/proxy_test_result.$$"
    rm -f "$tmp_result"
    touch "$tmp_result"

    # 测试单个代理
    test_single_proxy() {
        local ip=$1
        local port=$2
        local user=$3
        local pass=$4
        local index=$5

        # 根据IP类型选择测试参数
        if [[ $ip =~ ":" ]]; then
            local test_ip="[$ip]"
            local ip_type="ipv6"
            local test_url="http://www.google.com/generate_204"
        else
            local test_ip="$ip"
            local ip_type="ipv4"
            local test_url="http://www.google.com/generate_204"
        fi

        # 快速测试连通性
        if timeout 3 curl -s -m 2 \
            --proxy socks5h://$user:$pass@$test_ip:$port \
            $test_url -o /dev/null &>/dev/null; then
            echo "$index:$ip:$port:$ip_type:success" >> "$tmp_result"
        else
            echo "$index:$ip:$port:$ip_type:failed" >> "$tmp_result"
        fi
    }

    # 批量处理代理列表
    while IFS=: read -r ip port user pass; do
        if [ -z "$ip" ] || [ -z "$port" ] || [ -z "$user" ] || [ -z "$pass" ]; then
            continue
        fi
        ((total++))

        # 控制并发数
        while [ $current_concurrent -ge $max_concurrent ]; do
            for pid in "${pids[@]}"; do
                if ! kill -0 $pid 2>/dev/null; then
                    ((current_concurrent--))
                fi
            done
            [ $current_concurrent -ge $max_concurrent ] && sleep 0.1
        done

        # 启动测试
        test_single_proxy "$ip" "$port" "$user" "$pass" "$total" &
        pids+=($!)
        ((current_concurrent++))
        echo -e "${YELLOW}启动测试 $total: $ip:$port${NC}"
    done < /root/proxy_list.txt

    # 等待所有测试完成
    echo -e "\n${YELLOW}等待所有测试完成...${NC}"
    for pid in "${pids[@]}"; do
        wait $pid 2>/dev/null
    done

    # 处理并显示结果
    echo -e "\n${YELLOW}测试结果：${NC}"
    while IFS=: read -r index ip port type status; do
        if [ "$status" = "success" ]; then
            echo -e "${GREEN}✓ $ip:$port 连接成功${NC}"
            ((success++))
        else
            echo -e "${RED}✗ $ip:$port 连接失败${NC}"
            ((failed++))
        fi
    done < <(sort -n -t: -k1 "$tmp_result")

    # 清理临时文件
    rm -f "$tmp_result"

    # 显示详细统计
    echo -e "\n${YELLOW}测试统计：${NC}"
    echo -e "总代表数量: ${total}"
    echo -e "${GREEN}总成功数: ${success}${NC}"
    echo -e "${RED}总失败数: ${failed}${NC}"
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ 清理函数                                   │
# └─────────────────────────────────────────────┘
clear_proxy_rules() {
    echo "清除所有代理规则..."
    $service_manager stop xray
    $service_manager disable xray
    rm -f /etc/xray/serve_combined.json
    rm -f /etc/systemd/system/xray.service
    iptables -F
    iptables -X
    iptables -t nat -F
    iptables -t mangle -F
    ip6tables -F
    ip6tables -X
    ip6tables -t nat -F
    ip6tables -t mangle -F
    iptables-save
    ip6tables-save
    rm -f /root/proxy_list.txt
    echo "已清除所有代理规则，回到未安装SOCKS5代理的状态。"
    return 0
}

# ┌─────────────────────────────────────────────┐
# │ 生成策略1配置文件                           │
# └─────────────────────────────────────────────┘
generate_config_strategy_1() {
    cat <<EOF > /etc/xray/serve_strategy1.json
{
    "inbounds": [
EOF

    # 配置入站
    first_inbound=true
    for ipv4 in "${ipv4_addrs[@]}"; do
        if [ "$first_inbound" = true ]; then
            first_inbound=false
        else
            echo "," >> /etc/xray/serve_strategy1.json
        fi

        cat <<EOF >> /etc/xray/serve_strategy1.json
        {
            "listen": "$ipv4",
            "port": $socks_port,
            "protocol": "socks",
            "tag": "in_$ipv4",
            "settings": {
                "auth": "password",
                "udp": true,
                "accounts": [{
                    "user": "$socks_user",
                    "pass": "$socks_pass"
                }]
            }
        }
EOF
    done

    # 添加出站
    cat <<EOF >> /etc/xray/serve_strategy1.json
    ],
    "outbounds": [
EOF

    first_outbound=true
    for ipv4 in "${ipv4_addrs[@]}"; do
        if [ "$first_outbound" = true ]; then
            first_outbound=false
        else
            echo "," >> /etc/xray/serve_strategy1.json
        fi

        cat <<EOF >> /etc/xray/serve_strategy1.json
        {
            "protocol": "freedom",
            "tag": "out_$ipv4",
            "settings": { "domainStrategy": "UseIPv4" },
            "streamSettings": { "sockopt": {"mark": 255} },
            "sendThrough": "$ipv4"
        }
EOF
    done

    # 添加路由规则
    cat <<EOF >> /etc/xray/serve_strategy1.json
    ],
    "routing": {
        "rules": [
EOF

    first_rule=true
    for ipv4 in "${ipv4_addrs[@]}"; do
        if [ "$first_rule" = true ]; then
            first_rule=false
        else
            echo "," >> /etc/xray/serve_strategy1.json
        fi

        cat <<EOF >> /etc/xray/serve_strategy1.json
            {
                "type": "field",
                "inboundTag": ["in_$ipv4"],
                "outboundTag": "out_$ipv4"
            }
EOF
    done

    # 完成配置文件
    cat <<EOF >> /etc/xray/serve_strategy1.json
        ]
    }
}
EOF
}

# ┌─────────────────────────────────────────────┐
# │ 生成策略2配置文件                           │
# └─────────────────────────────────────────────┘
generate_config_strategy_2() {
    cat <<EOF > /etc/xray/serve_strategy2.json
{
    "inbounds": [
        {
            "listen": "${ipv4_addrs[0]}",
            "port": $socks_port,
            "protocol": "socks",
            "tag": "inbound-ipv4",
            "settings": {
                "auth": "password",
                "udp": true,
                "accounts": [{"user": "$socks_user", "pass": "$socks_pass"}]
            }
        }
    ],
    "outbounds": [
EOF

    first_outbound=true
    for ((i=1; i<${#ipv4_addrs[@]}; i++)); do
        ipv4=${ipv4_addrs[$i]}
        tag="outbound_${i}"

        if [ "$first_outbound" = true ]; then
            first_outbound=false
        else
            echo "," >> /etc/xray/serve_strategy2.json
        fi

        cat <<EOF >> /etc/xray/serve_strategy2.json
        {
            "protocol": "freedom",
            "tag": "$tag",
            "settings": {"domainStrategy": "UseIPv4"},
            "streamSettings": {"sockopt": {"mark": 255}},
            "sendThrough": "$ipv4"
        }
EOF
    done

    # 添加路由规则
    cat <<EOF >> /etc/xray/serve_strategy2.json
    ],
    "routing": {
        "balancers": [{
            "tag": "ipv4_balancer",
            "selector": [$(for ((i=1; i<${#ipv4_addrs[@]}; i++)); do echo -n "\"outbound_$i\", "; done | sed 's/, $//')],
            "strategy": {
                "type": "random"
            }
        }],
        "rules": [{
            "type": "field",
            "inboundTag": ["inbound-ipv4"],
            "balancerTag": "ipv4_balancer"
        }]
    }
}
EOF
}

# ┌─────────────────────────────────────────────┐
# │ 生成策略3配置文件                           │
# └─────────────────────────────────────────────┘
generate_config_strategy_3() {
    cat <<EOF > /etc/xray/serve_strategy3.json
{
    "inbounds": [
        {
            "listen": "${ipv4_addrs[0]}",
            "port": $socks_port,
            "protocol": "socks",
            "tag": "inbound-ipv4",
            "settings": {
                "auth": "password",
                "udp": true,
                "accounts": [{"user": "$socks_user", "pass": "$socks_pass"}]
            }
        }
    ],
    "outbounds": [
EOF

    first_outbound=true
    for ipv6 in "${ipv6_addrs[@]}"; do
        tag="outbound_${ipv6//:/_}"

        if [ "$first_outbound" = true ]; then
            first_outbound=false
        else
            echo "," >> /etc/xray/serve_strategy3.json
        fi

        cat <<EOF >> /etc/xray/serve_strategy3.json
        {
            "protocol": "freedom",
            "tag": "$tag",
            "settings": {"domainStrategy": "UseIPv6"},
            "streamSettings": {"sockopt": {"mark": 255}},
            "sendThrough": "$ipv6"
        }
EOF
    done

    # 添加路由规则
    cat <<EOF >> /etc/xray/serve_strategy3.json
    ],
    "routing": {
        "balancers": [{
            "tag": "ipv6_balancer",
            "selector": [$(for ipv6 in "${ipv6_addrs[@]}"; do echo -n "\"outbound_${ipv6//:/_}\", "; done | sed 's/, $//')],
            "strategy": {
                "type": "random"
            }
        }],
        "rules": [{
            "type": "field",
            "inboundTag": ["inbound-ipv4"],
            "balancerTag": "ipv6_balancer"
        }]
    }
}
EOF
}

# ┌─────────────────────────────────────────────┐
# │ 生成策略4配置文件                           │
# └─────────────────────────────────────────────┘
generate_config_strategy_4() {
    cat <<EOF > /etc/xray/serve_strategy4.json
{
    "inbounds": [
EOF

    # 配置入站
    first_inbound=true
    for ipv4 in "${ipv4_addrs[@]}"; do
        for port in "${!port_ipv6_map[@]}"; do
            if [ "$first_inbound" = true ]; then
                first_inbound=false
            else
                echo "," >> /etc/xray/serve_strategy4.json
            fi

            ipv6="${port_ipv6_map[$port]}"

            cat <<EOF >> /etc/xray/serve_strategy4.json
        {
            "listen": "$ipv4",
            "port": $port,
            "protocol": "socks",
            "tag": "in_${port}_${ipv4}",
            "settings": {
                "auth": "password",
                "udp": true,
                "accounts": [{
                    "user": "$socks_user",
                    "pass": "$socks_pass"
                }]
            }
        }
EOF
        done
    done

    # 添加出站
    cat <<EOF >> /etc/xray/serve_strategy4.json
    ],
    "outbounds": [
EOF

    first_outbound=true
    for port in "${!port_ipv6_map[@]}"; do
        ipv6="${port_ipv6_map[$port]}"
        tag="out_$port"

        if [ "$first_outbound" = true ]; then
            first_outbound=false
        else
            echo "," >> /etc/xray/serve_strategy4.json
        fi

        cat <<EOF >> /etc/xray/serve_strategy4.json
        {
            "protocol": "freedom",
            "tag": "$tag",
            "settings": { "domainStrategy": "UseIPv6" },
            "streamSettings": { "sockopt": {"mark": 255} },
            "sendThrough": "$ipv6"
        }
EOF
    done

    # 添加路由规则
    cat <<EOF >> /etc/xray/serve_strategy4.json
    ],
    "routing": {
        "rules": [
EOF

    first_rule=true
    for ipv4 in "${ipv4_addrs[@]}"; do
        for port in "${!port_ipv6_map[@]}"; do
            if [ "$first_rule" = true ]; then
                first_rule=false
            else
                echo "," >> /etc/xray/serve_strategy4.json
            fi

            cat <<EOF >> /etc/xray/serve_strategy4.json
            {
                "type": "field",
                "inboundTag": ["in_${port}_${ipv4}"],
                "outboundTag": "out_$port"
            }
EOF
        done
    done

    # 完成配置文件
    cat <<EOF >> /etc/xray/serve_strategy4.json
        ]
    }
}
EOF
}

# ┌─────────────────────────────────────────────┐
# │ 主菜单                                     │
# └─────────────────────────────────────────────┘
show_menu() {
    echo -e "\n${YELLOW}=== 代理服务器管理工具 ===${NC}"
    echo "1. 环境配置（安装必要组件）"
    echo "2. 启用BBR加速"
    echo "3. IPv6地址管理"
    echo "4. 设置带宽控制"
    echo "5. SOCKS5代理设置"
    echo "6. 设置IP进出策略"
    echo "7. 测试代理连通性"
    echo "8. 显示代理列表"
    echo "9. 清除所有代理规则"
    echo "10. 退出"

    read -p "请输入选项 [1-10]: " option
    case $option in
        1) setup_environment ;;
        2) enable_bbr ;;
        3) ipv6_manager_menu ;;
        4) setup_bandwidth_control ;;
        5) set_socks5_credentials ;;
        6) set_ip_strategy ;;  # 使用别名函数
        7) test_proxy_connectivity ;;
        8) 
            if [ -f /root/proxy_list.txt ]; then
                cat /root/proxy_list.txt
            else
                echo -e "${RED}/root/proxy_list.txt 文件不存在。${NC}"
            fi
            ;;
        9) clear_proxy_rules ;;
        10) echo "退出脚本。"; exit ;;
        *) echo -e "${RED}无效选项，请输入1-10之间的数字${NC}" ;;
    esac
}

# ┌─────────────────────────────────────────────┐
# │ 主程序                                     │
# └─────────────────────────────────────────────┘
main() {
    # 检查root权限
    if [ "$EUID" -ne 0 ]; then 
        echo -e "${RED}请使用root权限运行此脚本${NC}"
        exit 1
    fi

    # 初始化
    detect_system
    if [ $? -ne 0 ]; then
        echo -e "${RED}系统检测失败，请检查您的操作系统是否受支持。${NC}"
        exit 1
    fi

    check_and_install_iptables
    check_ipv6

    # 显示使用说明
    show_usage

    # 主循环
    while true; do
        show_menu
        sleep 1
    done
}

# 运行主程序
main
